/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { ThemeStyleType } from '@eva-design/dss';
import { Interaction, StyleType } from './type';
import { ThemeType } from '../theme/type';
export interface StyledComponentProps {
    appearance?: string;
    theme?: ThemeType;
    themedStyle?: StyleType;
    dispatch?: (interaction: Interaction[]) => void;
}
export interface ContextProps {
    style: ThemeStyleType;
    theme: ThemeType;
}
export declare type StyledComponentClass<P> = React.ComponentClass<StyledComponentProps & P>;
/**
 * `styled` is a High Order Function which is used to apply style mapping on component.
 *
 * Requires component to have `styledComponentName` string property which defines
 * corresponding component name in mapping. (e.g 'Button' for Button component).
 * Returns component class which can be used as styled component.
 *
 * @property {string} appearance - Determines style appearance of component. Default is provided by mapping.
 *
 * @property {ThemeType} theme - Determines theme used to style component.
 *
 * @property {StyleType} themedStyle - Determines component style for it's current state.
 *
 * @property {(interaction: Interaction[]) => void} dispatch - Determines function
 * for dispatching current state of component. This is designed to be used as style request function.
 * Calls component re-render if style for requested state differ from current.
 *
 * @param Component - Type: {React.ComponentClass}. Determines class or functional component to be styled.
 *
 * @overview-example Declaring Styled Component
 *
 * ```
 * import React from 'react';
 * import { TouchableOpacity } from 'react-native';
 * import { styled, Interaction } from '../..';
 *
 * class Button extends React.Component {
 *
 *   // Define component name used in `mapping`
 *   static styledComponentName = 'Button';
 *
 *   onPressIn = (e) => {
 *     // Request styles for `active` state and re-render
 *
 *     this.props.dispatch([Interaction.ACTIVE]);
 *
 *     if(this.props.onPressIn) {
 *       this.props.onPressIn(e);
 *     }
 *   };
 *
 *   onPressOut = (e) => {
 *     // Request styles for default state and re-render
 *
 *     this.props.dispatch([]);
 *
 *     if(this.props.onPressOut) {
 *       this.props.onPressOut(e);
 *     }
 *   };
 *
 *   render() {
 *     // Retrieve styles for current state from props (provided with themedStyle prop)
 *     // And apply it with saving priority of `style` prop
 *
 *     const { style, themedStyle, ...restProps } = this.props;
 *
 *     return (
 *       <TouchableOpacity
 *         {...restProps}
 *         style={[themedStyle, style]}
 *         onPressIn={this.onPressIn}
 *         onPressOut={this.onPressOut}
 *       />
 *     );
 *   }
 * }
 *
 * export const StyledButton = styled(Button);
 * ```
 *
 * @overview-example Styled Component Usage
 *
 * ```
 * import React from 'react';
 * import { StyledButton } from './path-to/styledButton.component';
 *
 * export const StyledButtonShowcase = (props) => (
 *   <StyledButton {...props}/>
 * );
 * ```
 */
export declare const styled: <P extends object>(Component: React.ComponentType<P>) => React.ComponentClass<StyledComponentProps & P, any>;
