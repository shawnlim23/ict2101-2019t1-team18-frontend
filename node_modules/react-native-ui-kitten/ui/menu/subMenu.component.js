/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { View, Animated, StyleSheet, } from 'react-native';
import { styled, } from '../../theme';
import { MenuItem, } from './menuItem.component';
import { MeasureNode, } from '../popover/measure.component';
import { Chevron } from '../support/components';
const MAIN_ITEM_KEY = 'Main Item';
const DIVIDER_ELEMENT_KEY = 'Divider';
const SUB_ITEMS_MEASURE_TAG = 'Sub Items';
class SubMenuComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            subItemsVisible: false,
            subItemsHeight: 0,
        };
        this.subItemsAnimation = new Animated.Value(0);
        this.iconAnimation = new Animated.Value(-180);
        this.subItemsExpandAnimate = (toValue) => {
            Animated.spring(this.subItemsAnimation, {
                toValue: toValue,
            }).start();
        };
        this.animateIcon = (toValue) => {
            Animated.timing(this.iconAnimation, {
                toValue: toValue,
                duration: 200,
            }).start();
        };
        this.onMainItemPress = () => {
            const subItemsVisible = !this.state.subItemsVisible;
            this.setState({ subItemsVisible });
        };
        this.onSubItemPress = (index, event) => {
            if (this.props.onSelect) {
                this.props.onSelect(index, event);
            }
        };
        this.getComponentStyles = (style) => {
            return {
                subContainer: {
                    paddingHorizontal: style.subItemsPaddingHorizontal,
                },
            };
        };
        this.onSubMenuMeasure = (result) => {
            const subItemsHeight = result[SUB_ITEMS_MEASURE_TAG].size.height;
            this.setState({ subItemsHeight });
        };
        this.getIsSelected = (item) => {
            const { selectedIndex } = this.props;
            return selectedIndex === item.menuIndex;
        };
        this.isMainItemDividerExist = () => {
            const { divider } = this.props;
            const { subItemsVisible } = this.state;
            return subItemsVisible && divider !== null;
        };
        this.isSubItemDividerExist = (item, index) => {
            const { divider } = this.props;
            return (index !== item.subItems.length - 1) && (divider !== null);
        };
        this.renderDivider = () => {
            const { divider } = this.props;
            return divider && React.cloneElement(divider, {
                key: DIVIDER_ELEMENT_KEY,
            });
        };
        this.renderMainItemAccessory = (style) => {
            const rotateInterpolate = this.iconAnimation.interpolate({
                inputRange: [-180, 0],
                outputRange: ['-180deg', '0deg'],
            });
            const animatedStyle = { transform: [{ rotate: rotateInterpolate }] };
            return (<Chevron style={[style, animatedStyle]} isAnimated={true}/>);
        };
        this.renderMenuItem = (item, isMainItem, index) => {
            const onPressHandler = isMainItem ? this.onMainItemPress : this.onSubItemPress;
            const mainMenuItemAccessory = isMainItem ? this.renderMainItemAccessory : null;
            return (<MenuItem {...item} key={index} accessory={mainMenuItemAccessory} onPress={onPressHandler}/>);
        };
        this.renderSubItemsInvisible = (subItems) => {
            const measuringProps = { tag: SUB_ITEMS_MEASURE_TAG };
            return (<MeasureNode onResult={this.onSubMenuMeasure}>
        {[
                <View {...measuringProps} pointerEvents='none' key={SUB_ITEMS_MEASURE_TAG} style={styles.invisibleMenu}>
            {subItems}
          </View>,
            ]}
      </MeasureNode>);
        };
        this.renderSubItems = () => {
            const { item, themedStyle, divider } = this.props;
            return item.subItems.map((sub, index) => {
                const { subContainer } = this.getComponentStyles(themedStyle);
                const isSelected = this.getIsSelected(sub);
                const element = React.cloneElement(this.renderMenuItem(sub, false, index), {
                    style: subContainer,
                    selected: isSelected,
                });
                const dividerElement = this.isSubItemDividerExist(item, index) ?
                    this.renderDivider() : null;
                return (<React.Fragment key={index}>
          {element}
          {dividerElement}
        </React.Fragment>);
            });
        };
        this.renderComponentChildren = () => {
            const { item } = this.props;
            return [
                this.renderMenuItem(item, true, MAIN_ITEM_KEY),
                this.renderSubItems(),
                this.isMainItemDividerExist() ? this.renderDivider() : null,
            ];
        };
    }
    componentDidUpdate(prevProps, prevState) {
        if (prevState.subItemsVisible !== this.state.subItemsVisible) {
            if (this.state.subItemsVisible) {
                this.subItemsExpandAnimate(this.state.subItemsHeight);
                this.animateIcon(0);
            }
            else {
                this.subItemsExpandAnimate(0);
                this.animateIcon(-180);
            }
        }
    }
    render() {
        const { subItemsVisible } = this.state;
        const [mainItem, subItems, divider] = this.renderComponentChildren();
        const invisibleSubs = this.renderSubItemsInvisible(subItems);
        const animatedStyle = { height: this.subItemsAnimation };
        return (<React.Fragment>
        {mainItem}
        {divider}
        <Animated.View style={animatedStyle}>
          {subItemsVisible && subItems}
        </Animated.View>
        {invisibleSubs}
      </React.Fragment>);
    }
}
SubMenuComponent.styledComponentName = 'SubMenu';
const styles = StyleSheet.create({
    invisibleMenu: {
        opacity: 0,
        position: 'absolute',
    },
});
export const SubMenu = styled(SubMenuComponent);
//# sourceMappingURL=subMenu.component.js.map