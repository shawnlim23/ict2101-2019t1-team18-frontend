/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, View, TouchableOpacity, } from 'react-native';
import { Interaction, styled, } from '../../theme';
import { Text, } from '../text/text.component';
import { allWithPrefix } from '../support/services';
/**
 * `MenuItem` is a support component for `Menu`.
 *
 * @extends React.Component
 *
 * @property {string} title - Determines the title of the ListItem.
 *
 * @property {StyleProp<TextStyle>} titleStyle - Customizes title style.
 *
 * @property {(style: StyleType) => React.ReactElement<ImageProps>} accessory - Determines the accessory of the
 * component.
 *
 * @property {(style: StyleType) => React.ReactElement<ImageProps>} icon - Determines the icon of the component.
 *
 * @property {MenuItemType[]} subItems - Determines the sub-items of the MenuItem.
 *
 * @property {(index: number, event: GestureResponderEvent) => void} onPress - Emits when component is pressed.
 *
 * @property StyledComponentProps
 *
 * @property TouchableTypeReturningProps<MenuItemType>
 * */
class MenuItemComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.onPress = (event) => {
            const { onPress, menuIndex } = this.props;
            if (onPress) {
                onPress(menuIndex, event);
            }
        };
        this.onPressIn = (event) => {
            const { onPressIn, menuIndex, dispatch } = this.props;
            dispatch([Interaction.ACTIVE]);
            if (onPressIn) {
                onPressIn(menuIndex, event);
            }
        };
        this.onPressOut = (event) => {
            const { onPressOut, menuIndex, dispatch } = this.props;
            dispatch([]);
            if (onPressOut) {
                onPressOut(menuIndex, event);
            }
        };
        this.onLongPress = (event) => {
            const { onLongPress, menuIndex } = this.props;
            if (onLongPress) {
                onLongPress(menuIndex, event);
            }
        };
        this.getComponentStyles = (style) => {
            const { paddingHorizontal, paddingVertical, backgroundColor, } = style;
            const titleStyles = allWithPrefix(style, 'title');
            const indicatorStyles = allWithPrefix(style, 'indicator');
            const iconStyles = allWithPrefix(style, 'icon');
            const accessoryStyle = allWithPrefix(style, 'accessory');
            return {
                container: {
                    paddingHorizontal: paddingHorizontal,
                    paddingVertical: paddingVertical,
                    backgroundColor: backgroundColor,
                },
                title: {
                    marginHorizontal: titleStyles.titleMarginHorizontal,
                    fontFamily: titleStyles.titleFontFamily,
                    fontSize: titleStyles.titleFontSize,
                    fontWeight: titleStyles.titleFontWeight,
                    lineHeight: titleStyles.titleLineHeight,
                    color: titleStyles.titleColor,
                },
                indicator: {
                    width: indicatorStyles.indicatorWidth,
                    backgroundColor: indicatorStyles.indicatorBackgroundColor,
                },
                icon: {
                    width: iconStyles.iconWidth,
                    height: iconStyles.iconHeight,
                    marginHorizontal: iconStyles.iconMarginHorizontal,
                    tintColor: iconStyles.iconTintColor,
                },
            };
        };
        this.renderIcon = (style) => {
            const { icon } = this.props;
            return icon(style);
        };
        this.renderTitle = (style) => {
            const { title, titleStyle } = this.props;
            return (<Text style={[style, titleStyle]}>{title}</Text>);
        };
        this.renderAccessory = (style) => {
            const { accessory } = this.props;
            return accessory(style);
        };
        this.renderComponentChildren = (style) => {
            const { title, icon, accessory } = this.props;
            return [
                icon && this.renderIcon(style.icon),
                title && this.renderTitle(style.title),
                accessory && this.renderAccessory(style.icon),
            ];
        };
    }
    render() {
        const _a = this.props, { themedStyle, style } = _a, restProps = __rest(_a, ["themedStyle", "style"]);
        const _b = this.getComponentStyles(themedStyle), { container, indicator } = _b, restStyles = __rest(_b, ["container", "indicator"]);
        const [iconElement, textElement, accessoryElement] = this.renderComponentChildren(restStyles);
        return (<TouchableOpacity activeOpacity={1.0} {...restProps} style={[styles.container, container, style]} onPress={this.onPress} onPressIn={this.onPressIn} onPressOut={this.onPressOut} onLongPress={this.onLongPress}>
        <View style={[styles.indicator, indicator]}/>
        <View style={styles.subContainer}>
          {iconElement}
          {textElement}
        </View>
        {accessoryElement}
      </TouchableOpacity>);
    }
}
MenuItemComponent.styledComponentName = 'MenuItem';
const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
    },
    subContainer: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    indicator: Object.assign(Object.assign({}, StyleSheet.absoluteFillObject), { zIndex: 2 }),
});
export const MenuItem = styled(MenuItemComponent);
//# sourceMappingURL=menuItem.component.js.map