/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { styled, } from '../../theme';
import { List, } from '../list/list.component';
import { Divider, } from '../divider/divider.component';
import { MenuItem, } from './menuItem.component';
import { SubMenu } from './subMenu.component';
import { MenuService } from './menu.service';
/**
 * `Menu` renders vertical list of `MenuItems`.
 *
 * @extends React.Component
 *
 * @property {string} appearance - Determines the appearance of the component.
 * Can be `default` or `noDivider`.
 * Default is `default`.
 *
 * @property {MenuItemType[]} data - Determines menu items.
 *
 * @property {number} selectedIndex - The index of selected item.
 *
 * @property {(index: number, event?: GestureResponderEvent) => void} onSelect - Fires when
 * selected item is changed.
 *
 * @property Omit<ListProps, 'renderItem'>
 *
 * @property StyledComponentProps
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react';
 * import { Menu } from '../..';
 *
 * export class MenuShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: null,
 *   };
 *
 *   data = [
 *     { title: 'Item 1' },
 *     { title: 'Item 2' },
 *     { title: 'Item 3' },
 *   ];
 *
 *   onSelect = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   render() {
 *     return (
 *       <Menu
 *         data={this.data}
 *         selectedItem={this.state.selectedIndex}
 *         onSelect={this.onItemSelect}
 *       />
 *     );
 *   }
 * }
 * ```
 *
 * @overview-example Sub Menus
 *
 * ```
 * import React from 'react';
 * import { Menu } from '../..';
 *
 * export class MenuShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: null,
 *   };
 *
 *   data = [
 *     { title: 'Item 1' },
 *     {
 *       title: 'Item 2',
 *       subItems: [
 *         { title: 'Item 21' },
 *         { title: 'Item 22' },
 *         { title: 'Item 23' },
 *       ],
 *     },
 *     { title: 'Item 3' },
 *   ];
 *
 *   onSelect = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   render() {
 *     return (
 *       <Menu
 *         data={this.data}
 *         selectedItem={this.state.selectedIndex}
 *         onSelect={this.onItemSelect}
 *       />
 *     );
 *   }
 * }
 * ```
 *
 * @overview-example With Icons
 *
 * ```
 * // IMPORTANT: To use Icon component make sure to follow this guide:
 * // https://akveo.github.io/react-native-ui-kitten/docs/guides/eva-icons
 *
 * import React from 'react';
 * import { Menu, Icon } from '../..';
 *
 * const StarIcon = (style) => (
 *   <Icon {...style} name='star' />
 * );
 *
 * export class MenuShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: null,
 *   };
 *
 *   data = [
 *     { title: 'Item 1', icon: StarIcon },
 *     { title: 'Item 2', icon: StarIcon },
 *     { title: 'Item 3', icon: StarIcon },
 *   ];
 *
 *   onSelect = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   render() {
 *     return (
 *       <Menu
 *         data={this.data}
 *         selectedItem={this.state.selectedIndex}
 *         onSelect={this.onItemSelect}
 *       />
 *     );
 *   }
 * }
 * ```
 *
 * @overview-example Eva Styling
 *
 * ```
 * import React from 'react';
 * import { Menu } from '../..';
 *
 * export class MenuShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: null,
 *   };
 *
 *   data = [
 *     { title: 'Item 1' },
 *     { title: 'Item 2' },
 *     { title: 'Item 3' },
 *   ];
 *
 *   onSelect = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   render() {
 *     return (
 *       <Menu
 *         appearance='noDivider'
 *         data={this.data}
 *         selectedIndex={this.state.selectedIndex}
 *         onSelect={this.onItemSelect}
 *       />
 *     );
 *   }
 * }
 * ```
 *
 * @example Disabled Item
 *
 * ```
 * import React from 'react';
 * import { Menu } from '../..';
 *
 * export class MenuShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: null,
 *   };
 *
 *   data = [
 *     { title: 'Item 1', disabled: true },
 *     { title: 'Item 2' },
 *     { title: 'Item 3' },
 *   ];
 *
 *   onSelect = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   render() {
 *     return (
 *       <Menu
 *         data={this.data}
 *         selectedItem={this.state.selectedIndex}
 *         onSelect={this.onItemSelect}
 *       />
 *     );
 *   }
 * }
 * ```
 *
 * @example Using Asset Icons
 *
 * ```
 * import React from 'react';
 * import { Image } from 'react-native';
 * import { Menu } from '../..';
 *
 * const StarIcon = (style) => (
 *   <Image style={style} source={require('path-to-assets/local-image.png')} />
 * );
 *
 * export class MenuShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: null,
 *   };
 *
 *   data = [
 *     { title: 'Item 1', icon: StarIcon },
 *     { title: 'Item 2', icon: StarIcon },
 *     { title: 'Item 3', icon: StarIcon },
 *   ];
 *
 *   onSelect = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   render() {
 *     return (
 *       <Menu
 *         data={this.data}
 *         selectedItem={this.state.selectedIndex}
 *         onSelect={this.onItemSelect}
 *       />
 *     );
 *   }
 * }
 * ```
 *
 * @example Inline Styling
 *
 * ```
 * import React from 'react';
 * import { StyleSheet } from 'react-native';
 * import { Menu } from '../..';
 *
 * export class MenuShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: null,
 *   };
 *
 *   data = [
 *     { title: 'Item 1', titleStyle: styles.menuItemTitle },
 *     { title: 'Item 2', titleStyle: styles.menuItemTitle },
 *     { title: 'Item 3', titleStyle: styles.menuItemTitle },
 *   ];
 *
 *   onSelect = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   render() {
 *     return (
 *       <Menu
 *         data={this.data}
 *         selectedItem={this.state.selectedIndex}
 *         onSelect={this.onItemSelect}
 *       />
 *     );
 *   }
 * }
 *
 * const styles = StyleSheet.create({
 *   menuItemTitle: { color: 'black', fontSize: 18 },
 * });
 * ```
 */
class MenuComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.service = new MenuService();
        this.onSelect = (selectedIndex, event) => {
            const { onSelect } = this.props;
            if (onSelect) {
                onSelect(selectedIndex, event);
            }
        };
        this.isDividerAbsent = () => {
            const { appearance } = this.props;
            return appearance !== 'noDivider';
        };
        this.areThereSubItems = (item) => {
            return item.subItems && item.subItems.length !== 0;
        };
        this.getIsSelected = (item) => {
            const { selectedIndex } = this.props;
            return selectedIndex === item.menuIndex;
        };
        this.renderMenuItem = (info) => {
            const { selectedIndex } = this.props;
            const isSelected = this.getIsSelected(info.item);
            return this.areThereSubItems(info.item) ? (<SubMenu item={info.item} selectedIndex={selectedIndex} divider={this.renderDivider()} onSelect={this.onSelect}/>) : (<MenuItem {...info.item} selected={isSelected} onPress={this.onSelect}/>);
        };
        this.renderDivider = () => {
            return this.isDividerAbsent() && (<Divider />);
        };
    }
    render() {
        const _a = this.props, { appearance, data } = _a, restProps = __rest(_a, ["appearance", "data"]);
        const items = this.service.setIndexes(data);
        return (<List ItemSeparatorComponent={this.renderDivider} renderItem={this.renderMenuItem} data={items} {...restProps}/>);
    }
}
MenuComponent.styledComponentName = 'Menu';
export const Menu = styled(MenuComponent);
//# sourceMappingURL=menu.component.js.map