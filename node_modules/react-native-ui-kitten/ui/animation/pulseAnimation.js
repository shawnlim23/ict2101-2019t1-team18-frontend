var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Animated, Easing, } from 'react-native';
import { Animation, } from './animation';
const DEFAULT_CONFIG = {
    start: 1.0,
    end: 1.25,
    easing: Easing.linear,
    duration: 500,
};
export class PulseAnimation extends Animation {
    constructor(config) {
        super(Object.assign(Object.assign({}, DEFAULT_CONFIG), config));
        this.value = new Animated.Value(this.config.start);
    }
    get animation() {
        const _a = this.config, { start, end } = _a, restConfig = __rest(_a, ["start", "end"]);
        const startAnimation = Animated.timing(this.value, Object.assign({ toValue: end }, restConfig));
        const endAnimation = Animated.timing(this.value, Object.assign({ toValue: start }, restConfig));
        return Animated.sequence([
            startAnimation,
            endAnimation,
        ]);
    }
    toProps() {
        return {
            // @ts-ignore: Animated.Value is not assignable to a number, but it is a number
            style: {
                transform: [{ scale: this.value }],
            },
        };
    }
}
//# sourceMappingURL=pulseAnimation.js.map