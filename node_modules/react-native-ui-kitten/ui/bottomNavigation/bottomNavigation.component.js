/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, View, } from 'react-native';
import { styled, } from '../../theme';
import { TabIndicator, } from '../support/components';
/**
 * `BottomNavigation` component is designed to be a Bottom Tab Bar.
 * Can be used for navigation.
 *
 * @extends React.Component
 *
 * @property {number} selectedIndex - Determines index of the selected tab.
 *
 * @property {string} appearance - Determines the appearance of the component.
 * Can be `default` | `noIndicator`.
 *
 * @property {React.ReactElement<TabProps> | React.ReactElement<TabProps>[]} children -
 * Determines tabs of the Bottom Navigation.
 *
 * @property {StyleProp<ViewStyle>} indicatorStyle - Determines styles of the indicator.
 *
 * @property {(index: number) => void} onSelect - Triggered on select value.
 *
 * @property ViewProps
 *
 * @property StyledComponentProps
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react';
 * import { BottomNavigation, BottomNavigationTab } from '../..';
 *
 * export class BottomNavigationShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: 0,
 *   };
 *
 *   onTabSelect = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   render() {
 *     return (
 *       <BottomNavigation
 *         selectedIndex={this.state.selectedIndex}
 *         onSelect={this.onTabSelect}>
 *          <BottomNavigationTab title='Dashboard' />
 *          <BottomNavigationTab title='Settings' />
 *       </BottomNavigation>
 *     );
 *   }
 * }
 * ```
 *
 * @overview-example With React Navigation
 *
 * ```
 * import React from 'react';
 * import { BottomNavigation, BottomNavigationTab } from '../..';
 * import { createBottomTabNavigator } from 'react-navigation-tabs';
 * import { Dashboard, Settings } from './path-to/screen-components'; // <-- Import screen components
 *
 * export const BottomNavigationShowcase = (props) => {
 *
 *  const onTabSelect = (selectedIndex) => {
 *    const { [index]: selectedRoute } = props.navigation.state.routes;
 *    props.navigation.navigate(selectedRoute.routeName);
 *  };
 *
 *  return (
 *    <BottomNavigation
 *      selectedIndex={props.navigation.state.index}
 *      onSelect={onTabSelect}>
 *      <BottomNavigationTab title='Dashboard' />
 *      <BottomNavigationTab title='Settings' />
 *    </BottomNavigation>
 *   );
 * }
 *
 * export const BottomTabNavigator = createBottomTabNavigator({
 *   Dashboard: Dashboard,
 *   Settings: Settings,
 * }, {
 *   initialRouteName: 'Dashboard',
 *   tabBarComponent: BottomNavigationShowcase,
 * });
 * ```
 *
 * @example Without Indicator
 *
 * ```
 * import React from 'react';
 * import { BottomNavigation, BottomNavigationTab } from '../..';
 *
 * export class BottomNavigationShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: 0,
 *   };
 *
 *   onTabSelect = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   render()  {
 *     return (
 *       <BottomNavigation
 *          appearance='noIndicator'
 *          selectedIndex={this.state.selectedIndex}
 *          onSelect={this.onTabSelect}>
 *          <BottomNavigationTab title='Dashboard' />
 *          <BottomNavigationTab title='Settings' />
 *       </BottomNavigation>
 *     );
 *   }
 * }
 * ```
 *
 * @example Inline Styling
 *
 * ```
 * import React from 'react';
 * import { StyleSheet } from 'react-native';
 * import { BottomNavigation, BottomNavigationTab } from '../..';
 *
 * export const BottomNavigationShowcase = (props) => (
 *   <BottomNavigation
 *      style={styles.bottomNavigation}
 *      indicatorStyle={styles.indicator}>
 *      <BottomNavigationTab title='Dashboard' />
 *      <BottomNavigationTab title='Settings' />
 *   </BottomNavigation>
 * );
 *
 * const styles = StyleSheet.create({
 *   bottomNavigation: { backgroundColor: 'white' },
 *   indicator: { backgroundColor: 'black' },
 * });
 * ```
 */
export class BottomNavigationComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.onTabSelect = (index) => {
            if (this.props.onSelect && this.props.selectedIndex !== index) {
                this.props.onSelect(index);
            }
        };
        this.getComponentStyle = (source) => {
            const { indicatorHeight, indicatorBackgroundColor } = source, containerParameters = __rest(source, ["indicatorHeight", "indicatorBackgroundColor"]);
            return {
                container: containerParameters,
                item: {},
                indicator: {
                    height: indicatorHeight,
                    backgroundColor: indicatorBackgroundColor,
                },
            };
        };
        this.renderIndicatorElement = (positions, style) => {
            const { indicatorStyle, selectedIndex } = this.props;
            return (<TabIndicator key={0} style={[style, styles.indicator, indicatorStyle]} selectedPosition={selectedIndex} positions={positions}/>);
        };
        this.renderTabElement = (element, index) => {
            return React.cloneElement(element, {
                key: index,
                style: [styles.item, element.props.style],
                selected: index === this.props.selectedIndex,
                onSelect: () => this.onTabSelect(index),
            });
        };
        this.renderTabElements = (source) => {
            return React.Children.map(source, this.renderTabElement);
        };
        this.renderComponentChildren = (style) => {
            const tabElements = this.renderTabElements(this.props.children);
            const hasIndicator = style.indicator.height > 0;
            return [
                hasIndicator && this.renderIndicatorElement(tabElements.length, style.indicator),
                ...tabElements,
            ];
        };
    }
    render() {
        const _a = this.props, { themedStyle, style } = _a, derivedProps = __rest(_a, ["themedStyle", "style"]);
        const _b = this.getComponentStyle(themedStyle), { container } = _b, componentStyles = __rest(_b, ["container"]);
        const [indicatorElement, ...tabElements] = this.renderComponentChildren(componentStyles);
        return (<View {...derivedProps} style={[container, styles.container, style]}>
        {indicatorElement}
        {tabElements}
      </View>);
    }
}
BottomNavigationComponent.styledComponentName = 'BottomNavigation';
BottomNavigationComponent.defaultProps = {
    selectedIndex: 0,
};
const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
    },
    item: {
        flex: 1,
    },
    indicator: {
        position: 'absolute',
    },
});
export const BottomNavigation = styled(BottomNavigationComponent);
//# sourceMappingURL=bottomNavigation.component.js.map