/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { ImageProps, StyleProp, TextStyle } from 'react-native';
import { StyledComponentProps, StyleType } from '../../theme';
import { PopoverProps } from '../popover/popover.component';
import { ModalPresentingBased } from '../support/typings';
declare type IconElement = React.ReactElement<ImageProps>;
declare type IconProp = (style: StyleType) => IconElement;
declare type WrappingElement = React.ReactElement<any>;
declare type PopoverContentProps = Omit<PopoverProps, 'content'>;
interface ComponentProps extends PopoverContentProps, ModalPresentingBased {
    text: string;
    textStyle?: StyleProp<TextStyle>;
    icon?: IconProp;
    children: WrappingElement;
}
export declare type TooltipProps = StyledComponentProps & ComponentProps;
export declare type TooltipElement = React.ReactElement<TooltipProps>;
/**
 * `Tooltip` displays informative text when users focus on or tap an element.
 *
 * @extends React.Component
 *
 * @property {string} text - Determines the text of the tooltip
 *
 * @property {StyleProp<TextStyle>} textStyle - Customizes text style.
 *
 * @property {(style: StyleType) => React.ReactElement<ImageProps>} icon - Determines icon of the component.
 *
 * @property {React.ReactElement<any>} children - Determines the element "above" which popover will be shown.
 *
 * @property {boolean} visible - Determines whether popover is visible or not.
 *
 * @property {string | PopoverPlacement} placement - Determines the placement of the popover.
 * Can be `left`, `top`, `right`, `bottom`, `left start`, `left end`, `top start`, `top end`, `right start`,
 * `right end`, `bottom start` or `bottom end`.
 * Default is `bottom`.
 *
 * @property {number} indicatorOffset - Determines the offset of indicator (arrow).
 * @property {StyleProp<ViewStyle>} indicatorStyle - Determines style of indicator (arrow).
 *
 * @property ViewProps
 *
 * @property ModalPresentingBased
 *
 * @property StyledComponentProps
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react';
 * import { Tooltip, Button } from '../..';
 *
 * export class TooltipShowcase extends React.Component {
 *
 *   state = {
 *     tooltipVisible: false,
 *   };
 *
 *   toggleTooltip = () => {
 *     const tooltipVisible = !this.state.tooltipVisible;
 *     this.setState({ tooltipVisible });
 *   };
 *
 *   render() {
 *     return (
 *       <Tooltip
 *         visible={this.state.tooltipVisible}
 *         text='Tooltip Text'
 *         onBackdropPress={this.toggleTooltip}>
 *         <Button onPress={this.toggleTooltip}>TOGGLE TOOLTIP</Button>
 *       </Tooltip>
 *     );
 *   }
 * }
 * ```
 *
 * @overview-example With Icon
 *
 * ```
 * // IMPORTANT: To use Icon component make sure to follow this guide:
 * // https://akveo.github.io/react-native-ui-kitten/docs/guides/eva-icons
 *
 * import React from 'react';
 * import { Tooltip, Button, Icon } from '../..';
 *
 * const StarIcon = (style) => (
 *   <Icon {...style} name='star' />
 * );
 *
 * export class TooltipShowcase extends React.Component {
 *
 *   state = {
 *     tooltipVisible: false,
 *   };
 *
 *   toggleTooltip = () => {
 *     const tooltipVisible = !this.state.tooltipVisible;
 *     this.setState({ tooltipVisible });
 *   };
 *
 *   render() {
 *     return (
 *       <Tooltip
 *         visible={this.state.tooltipVisible}
 *         text='Tooltip Text'
 *         icon={StarIcon}
 *         onBackdropPress={this.toggleTooltip}>
 *         <Button onPress={this.toggleTooltip}> TOGGLE TOOLTIP</Button>
 *       </Tooltip>
 *     );
 *   }
 * }
 * ```
 *
 * @example Using Asset Icons
 *
 * ```
 * import React from 'react';
 * import { Image } from 'react-native';
 * import { Tooltip, Button } from '../..';
 *
 * const StarIcon = (style) => (
 *   <Image style={style} source={require('path-to-assets/local-image.png')} />
 * );
 *
 * export class TooltipShowcase extends React.Component {
 *
 *   state = {
 *     tooltipVisible: false,
 *   };
 *
 *   toggleTooltip = () => {
 *     const tooltipVisible = !this.state.tooltipVisible;
 *     this.setState({ tooltipVisible });
 *   };
 *
 *   render() {
 *     return (
 *       <Tooltip
 *         visible={this.state.tooltipVisible}
 *         text='Tooltip Text'
 *         icon={StarIcon}
 *         onBackdropPress={this.toggleTooltip}>
 *         <Button onPress={this.toggleTooltip}>TOGGLE TOOLTIP</Button>
 *       </Tooltip>
 *     );
 *   }
 * }
 * ```
 *
 * @example Inline Styling
 *
 * ```
 * import React from 'react';
 * import { StyleSheet } from 'react-native';
 * import { Tooltip, Button } from '../..';
 *
 * export class TooltipShowcase extends React.Component {
 *
 *   state = {
 *     tooltipVisible: false,
 *   };
 *
 *   toggleTooltip = () => {
 *     const tooltipVisible = !this.state.tooltipVisible;
 *     this.setState({ tooltipVisible });
 *   };
 *
 *   render() {
 *     return (
 *       <Tooltip
 *         visible={this.state.tooltipVisible}
 *         text='Tooltip Text'
 *         textStyle={styles.tooltipText}
 *         onBackdropPress={this.toggleTooltip}>
 *         <Button onPress={this.toggleTooltip}>TOGGLE TOOLTIP</Button>
 *       </Tooltip>
 *     );
 *   }
 * }
 *
 * const styles = StyleSheet.create({
 *   tooltipText: { color: 'white', fontSize: 18 },
 * });
 * ```
 */
export declare class TooltipComponent extends React.Component<TooltipProps> {
    static styledComponentName: string;
    static defaultProps: Partial<TooltipProps>;
    private getComponentStyle;
    private renderTextElement;
    private renderIconElement;
    private renderContentElementChildren;
    private renderPopoverContentElement;
    render(): React.ReactElement<PopoverProps>;
}
export declare const Tooltip: React.ComponentClass<TooltipProps, any>;
export {};
