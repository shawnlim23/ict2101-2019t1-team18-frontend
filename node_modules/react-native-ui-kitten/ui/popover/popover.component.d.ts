/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { ViewProps } from 'react-native';
import { StyledComponentProps } from '../../theme';
import { PopoverViewProps } from './popoverView.component';
import { ModalPresentingBased } from '../support/typings';
declare type ContentElement = React.ReactElement<any>;
declare type ChildElement = React.ReactElement<any>;
interface ComponentProps extends PopoverViewProps, ModalPresentingBased {
    content: ContentElement;
    children: ChildElement;
    visible?: boolean;
}
export declare type PopoverProps = StyledComponentProps & ViewProps & ComponentProps;
export declare type PopoverElement = React.ReactElement<PopoverProps>;
/**
 * Displays content in a `Modal` when users focus on or tap an element. Also supports automatic placement.
 *
 * @extends React.Component
 *
 * @property {React.ReactElement<any>} content - Determines the content of the popover.
 *
 * @property {React.ReactElement<any>} children - Determines the element "above" which popover will be shown.
 *
 * @property {boolean} visible - Determines whether popover is visible or not.
 *
 * @property {string | PopoverPlacement} placement - Determines the placement of the popover.
 * Can be `left`, `top`, `right`, `bottom`, `left start`, `left end`, `top start`, `top end`, `right start`,
 * `right end`, `bottom start` or `bottom end`.
 * Default is `bottom`.
 *
 * @property {number} indicatorOffset - Determines the offset of indicator (arrow).
 * @property {StyleProp<ViewStyle>} indicatorStyle - Determines style of indicator (arrow).
 *
 * @property ViewProps
 *
 * @property ModalPresentingBased
 *
 * @property StyledComponentProps
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react';
 * import { StyleSheet } from 'react-native';
 * import { Popover, Layout, Button, Text } from '../..';
 *
 * export class PopoverShowcase extends React.Component {
 *
 *   state = {
 *     popoverVisible: false,
 *   };
 *
 *   togglePopover = () => {
 *     const popoverVisible = !this.state.popoverVisible;
 *     this.setState({ popoverVisible });
 *   };
 *
 *   renderPopoverContentElement = () => (
 *     <Layout style={styles.popoverContent}>
 *       <Text>Hi! This is popover.</Text>
 *     </Layout>
 *   );
 *
 *   render() {
 *     return (
 *       <Popover
 *         visible={this.state.popoverVisible}
 *         content={this.renderPopoverContentElement()}
 *         onBackdropPress={this.togglePopover}>
 *         <Button onPress={this.togglePopover}>TOGGLE POPOVER</Button>
 *       </Popover>
 *     );
 *   }
 * }
 *
 * const styles = StyleSheet.create({
 *   popoverContent: { justifyContent: 'center', alignItems: 'center' },
 * });
 * ```
 */
export declare class PopoverComponent extends React.Component<PopoverProps> {
    static styledComponentName: string;
    static defaultProps: Partial<PopoverProps>;
    private popoverId;
    private placementService;
    private popoverPlacement;
    componentDidUpdate(prevProps: PopoverProps): void;
    private handleVisibility;
    private updatePopoverElement;
    private getComponentStyle;
    private onMeasure;
    private createPlacement;
    private createPlacementOptions;
    private showPopoverModal;
    private renderPopoverElement;
    private renderChildElement;
    private renderMeasuringElement;
    render(): React.ReactNode;
}
export declare const Popover: React.ComponentClass<PopoverProps, any>;
export {};
