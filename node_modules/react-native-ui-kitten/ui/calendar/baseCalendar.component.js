/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, View, } from 'react-native';
import { CalendarHeader, } from './components/calendarHeader.component';
import { CalendarMonthHeader } from './components/calendarMonthHeader.component';
import { CalendarPager, } from './components/calendarPager.component';
import { CalendarPicker, } from './components/picker/calendarPicker.component';
import { CalendarDateContent, } from './components/calendarDateContent.component';
import { CalendarViewModes, } from './type';
import { DateService } from './service/date.service';
import { NativeDateService } from './service/nativeDate.service';
import { CalendarDataService, } from './service/calendarData.service';
import { Divider } from '../divider/divider.component';
const PICKER_ROWS = 4;
const PICKER_COLUMNS = 3;
const VIEWS_IN_PICKER = PICKER_ROWS * PICKER_COLUMNS;
const FORMAT_DAY = 'D';
const FORMAT_MONTH = 'MMM';
const FORMAT_YEAR = 'YYYY';
const FORMAT_HEADER_DATE = 'MMM YYYY';
const FORMAT_HEADER_MONTH = 'YYYY';
const FORMAT_HEADER_YEAR = 'YYYY';
export class BaseCalendarComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            viewMode: this.props.startView,
            visibleDate: this.dateService.getMonthStart(this.getSelectedDate()),
        };
        this.dataService = new CalendarDataService(this.dateService);
        this.calendarDayPagerRef = React.createRef();
        this.calendarYearPagerRef = React.createRef();
        this.scrollToToday = () => {
            this.setState({
                viewMode: CalendarViewModes.DATE,
                visibleDate: this.dateService.today(),
            });
        };
        this.onSelect = (item) => {
            this.onDaySelect(item);
        };
        this.onMonthSelect = (date) => {
            const nextVisibleDate = this.dateService.createDate(this.dateService.getYear(this.state.visibleDate), this.dateService.getMonth(date.date), this.dateService.getDate(this.state.visibleDate));
            this.setState({
                viewMode: this.state.viewMode.pickNext(),
                visibleDate: nextVisibleDate,
            });
        };
        this.onYearSelect = (date) => {
            const nextVisibleDate = this.dateService.createDate(this.dateService.getYear(date.date), this.dateService.getMonth(this.state.visibleDate), this.dateService.getDate(this.state.visibleDate));
            this.setState({
                viewMode: this.state.viewMode.pickNext(),
                visibleDate: nextVisibleDate,
            });
        };
        this.onDayPickerPagerSelect = (index) => {
            const yearStart = this.dateService.getYearStart(this.min);
            this.setState({
                visibleDate: this.dateService.addMonth(yearStart, index),
            });
        };
        this.onYearPickerPagerSelect = (index) => {
            const yearStart = this.dateService.getYearStart(this.min);
            this.setState({
                visibleDate: this.dateService.addYear(yearStart, index * VIEWS_IN_PICKER),
            });
        };
        this.onPickerNavigationPress = () => {
            this.setState({
                viewMode: this.state.viewMode.navigationNext(),
            });
        };
        this.onCalendarPagerLeft = () => {
            this.onCalendarPagerMove(-1);
        };
        this.onCalendarPagerRight = () => {
            this.onCalendarPagerMove(1);
        };
        this.onCalendarPagerMove = (step) => {
            const ref = this.getCurrentPagerRef();
            const index = this.getCalendarPagerIndex();
            this.onCalendarPagerMoveStart(ref, index, step);
        };
        this.onCalendarPagerMoveStart = (ref, index, step) => {
            ref.current.scrollToIndex({
                index: index + step,
                animated: true,
            });
        };
        this.shouldUpdateDayItem = (props, nextProps) => {
            return this.shouldUpdateDayElement(props, nextProps);
        };
        this.getCalendarStyle = (source) => {
            return {
                container: {
                    paddingVertical: source.paddingVertical,
                    borderColor: source.borderColor,
                    borderWidth: source.borderWidth,
                    borderRadius: source.borderRadius,
                    maxWidth: source.maxWidth,
                    maxHeight: source.maxHeight,
                },
                headerContainer: {
                    paddingHorizontal: source.headerPaddingHorizontal,
                    paddingVertical: source.headerPaddingVertical,
                },
                title: {
                    fontSize: source.titleFontSize,
                    fontWeight: source.titleFontWeight,
                    lineHeight: source.titleLineHeight,
                    color: source.titleColor,
                    fontFamily: source.titleFontFamily,
                },
                icon: {
                    width: source.iconWidth,
                    height: source.iconHeight,
                    tintColor: source.iconTintColor,
                },
                divider: {
                    marginVertical: source.dividerMarginVertical,
                },
                daysHeaderContainer: {
                    marginHorizontal: source.rowMarginHorizontal,
                },
                row: {
                    minHeight: source.rowMinHeight,
                    marginHorizontal: source.rowMarginHorizontal,
                },
            };
        };
        this.getWeekdayStyle = (source) => {
            return {
                fontSize: source.weekdayTextFontSize,
                fontWeight: source.weekdayTextFontWeight,
                lineHeight: source.weekdayTextLineHeight,
                color: source.weekdayTextColor,
                fontFamily: source.weekdayTextFontFamily,
            };
        };
        this.getIsDaySelected = (date) => {
            return this.isDaySelected(date);
        };
        this.isMonthSelected = (date) => {
            return this.dateService.isSameMonthSafe(date.date, this.getSelectedDate());
        };
        this.isYearSelected = (date) => {
            return this.dateService.isSameYearSafe(date.date, this.getSelectedDate());
        };
        this.isDayDisabled = (date) => {
            return !this.isDateFitsBounds(date) || this.isDateFitsFilter(date);
        };
        this.isMonthDisabled = (date) => {
            return !this.isDateFitsBounds(date) || this.isDateFitsFilter(date);
        };
        this.isYearDisabled = (date) => {
            return !this.isDateFitsBounds(date) || this.isDateFitsFilter(date);
        };
        this.isDayToday = (date) => {
            return this.dateService.isSameDaySafe(date.date, this.dateService.today());
        };
        this.isMonthToday = (date) => {
            return this.dateService.isSameMonthSafe(date.date, this.dateService.today());
        };
        this.isYearToday = (date) => {
            return this.dateService.isSameYearSafe(date.date, this.dateService.today());
        };
        this.isDateFitsFilter = (date) => {
            return this.props.filter && !this.props.filter(date.date) || false;
        };
        this.isDateFitsBounds = (date) => {
            return this.dateService.isBetweenIncludingSafe(date.date, this.min, this.max);
        };
        this.isDayPickerInViewPort = (index) => {
            const visibleDayPickerIndex = this.dataService.getNumberOfMonths(this.min, this.state.visibleDate);
            return index === visibleDayPickerIndex || Math.abs(index - visibleDayPickerIndex) === 1;
        };
        this.isYearPickerInViewPort = (index) => {
            const numberOfYears = this.dataService.getNumberOfYears(this.min, this.state.visibleDate);
            const visibleYearPickerIndex = Math.floor(numberOfYears / VIEWS_IN_PICKER);
            return index === visibleYearPickerIndex || Math.abs(index - visibleYearPickerIndex) === 1;
        };
        this.createHeaderTitle = (date, viewMode) => {
            switch (viewMode) {
                case CalendarViewModes.DATE:
                    return this.dateService.format(date, FORMAT_HEADER_DATE);
                case CalendarViewModes.MONTH: {
                    return this.dateService.format(date, FORMAT_HEADER_MONTH);
                }
                case CalendarViewModes.YEAR: {
                    const minDateFormat = this.dateService.format(this.min, FORMAT_HEADER_YEAR);
                    const maxDateFormat = this.dateService.format(this.max, FORMAT_HEADER_YEAR);
                    return `${minDateFormat} - ${maxDateFormat}`;
                }
            }
        };
        this.getCalendarPagerIndex = () => {
            switch (this.state.viewMode.id) {
                case CalendarViewModes.DATE.id:
                    return this.dataService.getNumberOfMonths(this.min, this.state.visibleDate);
                case CalendarViewModes.YEAR.id:
                    return Math.floor(this.dataService.getNumberOfYears(this.min, this.state.visibleDate) / VIEWS_IN_PICKER);
            }
        };
        this.getCurrentPagerRef = () => {
            switch (this.state.viewMode.id) {
                case CalendarViewModes.DATE.id:
                    return this.calendarDayPagerRef;
                case CalendarViewModes.YEAR.id:
                    return this.calendarYearPagerRef;
            }
        };
        this.isLateralNavigationAllowed = () => {
            const { viewMode } = this.state;
            return viewMode.id === CalendarViewModes.DATE.id || viewMode.id === CalendarViewModes.YEAR.id;
        };
        this.renderWeekdayElement = (weekday, index) => {
            return (<CalendarDateContent key={index} textStyle={this.getWeekdayStyle(this.props.themedStyle)}>
        {weekday}
      </CalendarDateContent>);
        };
        this.renderDayElement = (date, style) => {
            return (<CalendarDateContent style={style.container} textStyle={style.text}>
        {this.dateService.format(date.date, FORMAT_DAY)}
      </CalendarDateContent>);
        };
        this.renderDayIfNeeded = (item, style) => {
            const shouldRender = !item.bounding || this.props.boundingMonth;
            if (shouldRender) {
                const renderSelector = this.props.renderDay || this.renderDayElement;
                return renderSelector(item, style);
            }
            return null;
        };
        this.renderMonthElement = (date, style) => {
            return (<CalendarDateContent style={[style.container, styles.monthCell]} textStyle={style.text}>
        {this.dateService.format(date.date, FORMAT_MONTH)}
      </CalendarDateContent>);
        };
        this.renderYearElement = (date, style) => {
            return (<CalendarDateContent style={[style.container, styles.yearCell]} textStyle={style.text}>
        {this.dateService.format(date.date, FORMAT_YEAR)}
      </CalendarDateContent>);
        };
        this.renderDayPickerElement = (date, index) => {
            const { row } = this.getCalendarStyle(this.props.themedStyle);
            return (<CalendarPicker key={index} category='day' data={this.getDayPickerData(date)} rowStyle={row} onSelect={this.onSelect} isItemSelected={this.getIsDaySelected} isItemDisabled={this.isDayDisabled} isItemToday={this.isDayToday} shouldItemUpdate={this.shouldUpdateDayItem} renderItem={this.renderDayIfNeeded}/>);
        };
        this.renderDayPickerPagerElement = (date) => {
            const { themedStyle } = this.props;
            const { divider, daysHeaderContainer } = this.getCalendarStyle(themedStyle);
            const visibleDayPickerIndex = this.dataService.getNumberOfMonths(this.min, this.state.visibleDate);
            return (<React.Fragment>
        <CalendarMonthHeader style={daysHeaderContainer} data={this.dateService.getDayOfWeekNames()}>
          {this.renderWeekdayElement}
        </CalendarMonthHeader>
        <Divider style={divider}/>
        <CalendarPager ref={this.calendarDayPagerRef} selectedIndex={visibleDayPickerIndex} data={this.dataService.createDayPickerPagerData(this.min, this.max)} onSelect={this.onDayPickerPagerSelect} shouldLoadComponent={this.isDayPickerInViewPort}>
          {this.renderDayPickerElement}
        </CalendarPager>
      </React.Fragment>);
        };
        this.renderMonthPickerElement = (date) => {
            const { row } = this.getCalendarStyle(this.props.themedStyle);
            return (<CalendarPicker category='month' data={this.dataService.createMonthPickerData(date, PICKER_ROWS, PICKER_COLUMNS)} rowStyle={row} onSelect={this.onMonthSelect} isItemSelected={this.isMonthSelected} isItemDisabled={this.isMonthDisabled} isItemToday={this.isMonthToday} renderItem={this.props.renderMonth || this.renderMonthElement}/>);
        };
        this.renderYearPickerElement = (date, index) => {
            const { row } = this.getCalendarStyle(this.props.themedStyle);
            return (<CalendarPicker key={index} category='year' data={this.dataService.createYearPickerData(date.date, PICKER_ROWS, PICKER_COLUMNS)} rowStyle={row} onSelect={this.onYearSelect} isItemSelected={this.isYearSelected} isItemDisabled={this.isYearDisabled} isItemToday={this.isYearToday} renderItem={this.props.renderYear || this.renderYearElement}/>);
        };
        this.renderYearPickerPagerElement = (date) => {
            const numberOfYears = this.dataService.getNumberOfYears(this.min, this.state.visibleDate);
            const visibleYearPickerIndex = Math.floor(numberOfYears / VIEWS_IN_PICKER);
            return (<CalendarPager ref={this.calendarYearPagerRef} selectedIndex={visibleYearPickerIndex} data={this.dataService.createYearPickerPagerData(this.min, this.max, PICKER_ROWS, PICKER_COLUMNS)} onSelect={this.onYearPickerPagerSelect} shouldLoadComponent={this.isYearPickerInViewPort}>
        {this.renderYearPickerElement}
      </CalendarPager>);
        };
        this.renderPickerElement = (date) => {
            switch (this.state.viewMode.id) {
                case CalendarViewModes.DATE.id:
                    return this.renderDayPickerPagerElement(date);
                case CalendarViewModes.MONTH.id:
                    return this.renderMonthPickerElement(date);
                case CalendarViewModes.YEAR.id:
                    return this.renderYearPickerPagerElement(date);
            }
        };
        this.renderCalendarFooter = () => {
            const { renderFooter } = this.props;
            return renderFooter && renderFooter();
        };
        this.renderCalendarHeader = () => {
            const { themedStyle, title } = this.props;
            const { headerContainer, title: titleStyle, icon } = this.getCalendarStyle(themedStyle);
            const titleSelector = title || this.createHeaderTitle;
            return (<CalendarHeader style={headerContainer} title={titleSelector(this.state.visibleDate, this.state.viewMode)} titleStyle={titleStyle} iconStyle={icon} lateralNavigationAllowed={this.isLateralNavigationAllowed()} onTitlePress={this.onPickerNavigationPress} onLeft={this.onCalendarPagerLeft} onRight={this.onCalendarPagerRight}/>);
        };
    }
    get dateService() {
        return this.props.dateService;
    }
    get min() {
        return this.props.min || this.dateService.getYearStart(this.dateService.today());
    }
    get max() {
        return this.props.max || this.dateService.getYearEnd(this.dateService.today());
    }
    render() {
        const _a = this.props, { style, themedStyle } = _a, restProps = __rest(_a, ["style", "themedStyle"]);
        const { container } = this.getCalendarStyle(themedStyle);
        return (<View {...restProps} style={[styles.container, container, style]}>
        {this.renderCalendarHeader()}
        {this.renderPickerElement(this.state.visibleDate)}
        {this.renderCalendarFooter()}
      </View>);
    }
}
BaseCalendarComponent.defaultProps = {
    dateService: new NativeDateService(),
    boundingMonth: true,
    startView: CalendarViewModes.DATE,
};
const styles = StyleSheet.create({
    container: {
        overflow: 'hidden',
    },
    monthCell: {
        aspectRatio: 0.25 * DateService.DAYS_IN_WEEK,
    },
    yearCell: {
        aspectRatio: 0.25 * DateService.DAYS_IN_WEEK,
    },
});
//# sourceMappingURL=baseCalendar.component.js.map