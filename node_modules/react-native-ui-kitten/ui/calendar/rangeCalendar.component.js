import { BaseCalendarComponent, } from './baseCalendar.component';
import { styled, } from '../../theme';
import { RangeDateService } from './service/rangeDate.service';
/**
 * Styled `RangeCalendar` component.
 * Supports locales and different date objects like Moment.js or date-fns.
 * Composes date picker components in a horizontal pageable list.
 *
 * @extends React.Component
 *
 * @property {D} min - Minimal date that is able to be selected.
 *
 * @property {D} max - Maximum date that is able to be selected.
 *
 * @property {CalendarRange<D>} range - Range which is currently selected.
 *
 * @property {DateService<D>} dateService - Date service that is able to work with a date objects.
 * Defaults to Native Date service that works with JS Date.
 * Allows using different types of date like Moment.js or date-fns.
 *
 * @property {boolean} boundingMonth - Defines if we should render previous and next months in the current month view.
 *
 * @property {CalendarViewMode} startView - Defines starting view for calendar. Defaults to Date view.
 *
 * @property {(date: D) => string} title - Defines the title for visible date.
 *
 * @property {(date: D) => string} todayTitle - Defines the title for today's date.
 *
 * @property {(date: D) => ReactElement<any>} filter - Predicate that decides which cells will be disabled.
 *
 * @property {(date: D) => void} onSelect - Selection emitter. Fires when another day cell is pressed.
 *
 * @property {(date: D, style: StyleType) => ReactElement<any>} renderDay - Should return the content of day cell.
 *
 * @property {(date: D, style: StyleType) => ReactElement<any>} renderMonth - Should return the content of month cell.
 *
 * @property {(date: D, style: StyleType) => ReactElement<any>} renderYear - Should return the content of year cell.
 *
 * @overview-example Basic Usage
 *
 * ```
 * import React from 'react';
 * import { RangeCalendar } from '../..';
 *
 * export class RangeCalendar extends React.Component {
 *
 *   state = {
 *     range: {
 *       startDate: null,
 *       endDate: null,
 *     },
 *   };
 *
 *   onSelect = (range) => {
 *     this.setState({ range });
 *   };
 *
 *   render() {
 *     return (
 *       <RangeCalendar
 *         range={this.state.range}
 *         onSelect={this.onSelect}
 *       />
 *     );
 *   }
 * }
 * ```
 */
export class RangeCalendarComponent extends BaseCalendarComponent {
    constructor() {
        super(...arguments);
        this.rangeDateService = new RangeDateService(this.dateService);
    }
    // BaseCalendarComponent
    onDaySelect(date) {
        const { range, onSelect } = this.props;
        const calendarRange = this.rangeDateService.createRange(range, date);
        onSelect && onSelect(calendarRange);
    }
    getSelectedDate() {
        return this.dateService.today();
    }
    isDaySelected(date) {
        return false;
    }
    shouldUpdateDayElement(props, nextProps) {
        const dateChanged = this.dateService.compareDatesSafe(props.date.date, nextProps.date.date) !== 0;
        if (dateChanged) {
            return true;
        }
        const selectionChanged = props.selected !== nextProps.selected;
        const disablingChanged = props.disabled !== nextProps.disabled;
        const rangeChanged = props.range !== nextProps.range;
        const rangeStartPlaceChanged = props.firstRangeItem !== nextProps.firstRangeItem;
        const rangeEndPlaceChanged = props.lastRangeItem !== nextProps.lastRangeItem;
        const shouldUpdate = selectionChanged
            || disablingChanged
            || rangeChanged
            || rangeStartPlaceChanged
            || rangeEndPlaceChanged;
        if (shouldUpdate) {
            return true;
        }
        return props.theme !== nextProps.theme;
    }
    getDayPickerData(date) {
        return this.dataService.createDayPickerData(date.date, this.props.range);
    }
}
RangeCalendarComponent.styledComponentName = 'Calendar';
export const RangeCalendar = styled(RangeCalendarComponent);
//# sourceMappingURL=rangeCalendar.component.js.map