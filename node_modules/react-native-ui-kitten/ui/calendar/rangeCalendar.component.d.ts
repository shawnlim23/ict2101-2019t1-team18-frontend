import React from 'react';
import { BaseCalendarComponent, BaseCalendarProps } from './baseCalendar.component';
import { StyledComponentProps } from '../../theme';
import { CalendarDateInfo, CalendarRange } from './type';
import { CalendarPickerCellProps } from './components/picker/calendarPickerCell.component';
import { DateBatch } from './service/calendarData.service';
export interface ComponentProps<D> {
    range: CalendarRange<D>;
    onSelect: (range: CalendarRange<D>) => void;
}
export declare type RangeCalendarProps<D> = ComponentProps<D> & BaseCalendarProps<D> & StyledComponentProps;
export declare type RangeCalendarElement<D> = React.ReactElement<RangeCalendarProps<D>>;
/**
 * Styled `RangeCalendar` component.
 * Supports locales and different date objects like Moment.js or date-fns.
 * Composes date picker components in a horizontal pageable list.
 *
 * @extends React.Component
 *
 * @property {D} min - Minimal date that is able to be selected.
 *
 * @property {D} max - Maximum date that is able to be selected.
 *
 * @property {CalendarRange<D>} range - Range which is currently selected.
 *
 * @property {DateService<D>} dateService - Date service that is able to work with a date objects.
 * Defaults to Native Date service that works with JS Date.
 * Allows using different types of date like Moment.js or date-fns.
 *
 * @property {boolean} boundingMonth - Defines if we should render previous and next months in the current month view.
 *
 * @property {CalendarViewMode} startView - Defines starting view for calendar. Defaults to Date view.
 *
 * @property {(date: D) => string} title - Defines the title for visible date.
 *
 * @property {(date: D) => string} todayTitle - Defines the title for today's date.
 *
 * @property {(date: D) => ReactElement<any>} filter - Predicate that decides which cells will be disabled.
 *
 * @property {(date: D) => void} onSelect - Selection emitter. Fires when another day cell is pressed.
 *
 * @property {(date: D, style: StyleType) => ReactElement<any>} renderDay - Should return the content of day cell.
 *
 * @property {(date: D, style: StyleType) => ReactElement<any>} renderMonth - Should return the content of month cell.
 *
 * @property {(date: D, style: StyleType) => ReactElement<any>} renderYear - Should return the content of year cell.
 *
 * @overview-example Basic Usage
 *
 * ```
 * import React from 'react';
 * import { RangeCalendar } from '../..';
 *
 * export class RangeCalendar extends React.Component {
 *
 *   state = {
 *     range: {
 *       startDate: null,
 *       endDate: null,
 *     },
 *   };
 *
 *   onSelect = (range) => {
 *     this.setState({ range });
 *   };
 *
 *   render() {
 *     return (
 *       <RangeCalendar
 *         range={this.state.range}
 *         onSelect={this.onSelect}
 *       />
 *     );
 *   }
 * }
 * ```
 */
export declare class RangeCalendarComponent<D> extends BaseCalendarComponent<D, RangeCalendarProps<D>> {
    static styledComponentName: string;
    private rangeDateService;
    protected onDaySelect(date: CalendarDateInfo<D>): void;
    protected getSelectedDate(): D;
    protected isDaySelected(date: CalendarDateInfo<D>): boolean;
    protected shouldUpdateDayElement(props: CalendarPickerCellProps<D>, nextProps: CalendarPickerCellProps<D>): boolean;
    protected getDayPickerData(date: CalendarDateInfo<D>): DateBatch<D>;
}
export declare const RangeCalendar: React.ComponentClass<StyledComponentProps & BaseCalendarProps<unknown> & ComponentProps<unknown>, any>;
