/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { StyleType } from '../../theme';
import { ViewProps } from 'react-native';
import { CalendarPickerCellProps } from './components/picker/calendarPickerCell.component';
import { CalendarDateInfo, CalendarViewMode } from './type';
import { DateService } from './service/date.service';
import { NativeDateService } from './service/nativeDate.service';
import { CalendarDataService, DateBatch } from './service/calendarData.service';
export interface BaseCalendarProps<D> extends ViewProps {
    min?: D;
    max?: D;
    dateService?: DateService<D>;
    boundingMonth?: boolean;
    startView?: CalendarViewMode;
    title?: (date: D, viewMode: CalendarViewMode) => string;
    todayTitle?: (date: D) => string;
    filter?: (date: D) => boolean;
    renderFooter?: () => React.ReactElement<any>;
    renderDay?: (info: CalendarDateInfo<D>, style: StyleType) => React.ReactElement<any>;
    renderMonth?: (info: CalendarDateInfo<D>, style: StyleType) => React.ReactElement<any>;
    renderYear?: (info: CalendarDateInfo<D>, style: StyleType) => React.ReactElement<any>;
    themedStyle?: StyleType;
}
interface State<D> {
    viewMode: CalendarViewMode;
    visibleDate: D;
}
export declare type BaseCalendarElement<D> = React.ReactElement<BaseCalendarProps<D>>;
export declare abstract class BaseCalendarComponent<D, P> extends React.Component<BaseCalendarProps<D> & P, State<D>> {
    static defaultProps: {
        dateService: NativeDateService;
        boundingMonth: boolean;
        startView: CalendarViewMode;
    };
    state: State<D>;
    protected abstract onDaySelect(item: any): void;
    protected abstract isDaySelected(date: CalendarDateInfo<D>): boolean;
    protected abstract getSelectedDate(): D;
    protected abstract getDayPickerData(date: CalendarDateInfo<D>): DateBatch<D>;
    protected abstract shouldUpdateDayElement(props: CalendarPickerCellProps<D>, nextProps: CalendarPickerCellProps<D>): boolean;
    protected dataService: CalendarDataService<D>;
    protected readonly dateService: DateService<D>;
    private readonly min;
    private readonly max;
    private calendarDayPagerRef;
    private calendarYearPagerRef;
    scrollToToday: () => void;
    private onSelect;
    private onMonthSelect;
    private onYearSelect;
    private onDayPickerPagerSelect;
    private onYearPickerPagerSelect;
    private onPickerNavigationPress;
    private onCalendarPagerLeft;
    private onCalendarPagerRight;
    private onCalendarPagerMove;
    private onCalendarPagerMoveStart;
    private shouldUpdateDayItem;
    getCalendarStyle: (source: StyleType) => StyleType;
    private getWeekdayStyle;
    private getIsDaySelected;
    private isMonthSelected;
    private isYearSelected;
    isDayDisabled: (date: CalendarDateInfo<D>) => boolean;
    private isMonthDisabled;
    private isYearDisabled;
    isDayToday: (date: CalendarDateInfo<D>) => boolean;
    private isMonthToday;
    private isYearToday;
    private isDateFitsFilter;
    private isDateFitsBounds;
    private isDayPickerInViewPort;
    private isYearPickerInViewPort;
    private createHeaderTitle;
    private getCalendarPagerIndex;
    private getCurrentPagerRef;
    private isLateralNavigationAllowed;
    private renderWeekdayElement;
    private renderDayElement;
    private renderDayIfNeeded;
    private renderMonthElement;
    private renderYearElement;
    private renderDayPickerElement;
    private renderDayPickerPagerElement;
    private renderMonthPickerElement;
    private renderYearPickerElement;
    private renderYearPickerPagerElement;
    private renderPickerElement;
    private renderCalendarFooter;
    private renderCalendarHeader;
    render(): React.ReactElement<ViewProps>;
}
export {};
