var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { ViewPager, } from '../../viewPager/viewPager.component';
export class CalendarPager extends React.Component {
    constructor() {
        super(...arguments);
        this.viewPagerRef = React.createRef();
        this.onSelect = (index) => {
            // TODO: This fixes layout junks (for any reason)
            setTimeout(() => {
                this.props.onSelect(index);
            });
        };
        this.shouldLoadComponent = (index) => {
            if (this.props.shouldLoadComponent) {
                return this.props.shouldLoadComponent(index);
            }
            return true;
        };
        this.createChildElement = (date, index) => {
            if (this.shouldLoadComponent(index)) {
                return this.props.children(date, index);
            }
            return null;
        };
    }
    scrollToIndex(params) {
        this.viewPagerRef.current.scrollToIndex(params);
    }
    render() {
        const _a = this.props, { data, children } = _a, restProps = __rest(_a, ["data", "children"]);
        return (<ViewPager {...restProps} ref={this.viewPagerRef} shouldLoadComponent={this.shouldLoadComponent} onSelect={this.onSelect}>
        {data.map(this.createChildElement)}
      </ViewPager>);
    }
}
//# sourceMappingURL=calendarPager.component.js.map