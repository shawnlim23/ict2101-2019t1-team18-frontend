/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { View, } from 'react-native';
import { CalendarPickerRow, } from './calendarPickerRow.component';
import { CalendarPickerCell, } from './calendarPickerCell.component';
export class CalendarPicker extends React.Component {
    constructor() {
        super(...arguments);
        this.isFirstRangeItem = (item, range) => {
            return range.indexOf(item) === 0;
        };
        this.isLastRangeItem = (item, range) => {
            return range.indexOf(item) === range.length - 1;
        };
        this.renderCellElement = (item, index) => {
            const isFirstRangeItem = this.isFirstRangeItem(item, this.rangedArray);
            const isLastRangeItem = this.isLastRangeItem(item, this.rangedArray);
            return (<CalendarPickerCell key={index} date={item} category={this.props.category} selected={this.props.isItemSelected(item)} disabled={this.props.isItemDisabled(item)} bounding={item.bounding} today={this.props.isItemToday(item)} range={item.range} firstRangeItem={isFirstRangeItem} lastRangeItem={isLastRangeItem} onSelect={this.props.onSelect} shouldComponentUpdate={this.props.shouldItemUpdate}>
        {this.props.renderItem}
      </CalendarPickerCell>);
        };
        this.renderRowElement = (item, index) => {
            const { rowStyle } = this.props;
            return (<CalendarPickerRow style={rowStyle} key={index} data={item} renderItem={this.renderCellElement}/>);
        };
    }
    get rangedArray() {
        const { data } = this.props;
        return [].concat(...data).filter((item) => {
            return item.range;
        });
    }
    render() {
        const _a = this.props, { data, renderItem } = _a, restProps = __rest(_a, ["data", "renderItem"]);
        return (<View {...restProps}>
        {data.map(this.renderRowElement)}
      </View>);
    }
}
//# sourceMappingURL=calendarPicker.component.js.map