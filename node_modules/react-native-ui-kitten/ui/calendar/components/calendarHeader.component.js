var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, View, } from 'react-native';
import { Button } from '../../button/button.component';
import { Chevron, } from '../../support/components';
export class CalendarHeader extends React.Component {
    constructor() {
        super(...arguments);
        this.renderSpecificTitleIcon = (style, direction) => {
            return (<Chevron style={style} direction={direction}/>);
        };
        this.renderTitleIcon = (style) => {
            const { iconStyle } = this.props;
            return this.renderSpecificTitleIcon(iconStyle, 'bottom');
        };
        this.renderLeftIcon = (style) => {
            const { iconStyle } = this.props;
            return this.renderSpecificTitleIcon([iconStyle, styles.lateralIcon], 'left');
        };
        this.renderRightIcon = (style) => {
            const { iconStyle } = this.props;
            return this.renderSpecificTitleIcon([iconStyle, styles.lateralIcon], 'right');
        };
        this.renderLateralNavigationControls = () => {
            return (<View style={styles.subContainer}>
        <Button style={styles.headerButton} appearance='ghost' 
            // @ts-ignore
            icon={this.renderLeftIcon} onPress={this.props.onLeft}/>
        <Button style={styles.headerButton} appearance='ghost' 
            // @ts-ignore
            icon={this.renderRightIcon} onPress={this.props.onRight}/>
      </View>);
        };
    }
    render() {
        const _a = this.props, { style, titleStyle, onTitlePress, title, lateralNavigationAllowed } = _a, restProps = __rest(_a, ["style", "titleStyle", "onTitlePress", "title", "lateralNavigationAllowed"]);
        return (<View style={[styles.container, style]} {...restProps}>
        <Button style={styles.headerButton} appearance='ghost' textStyle={[titleStyle, styles.headerButtonText]} 
        // @ts-ignore
        icon={this.renderTitleIcon} onPress={onTitlePress}>
          {title}
        </Button>
        {lateralNavigationAllowed && this.renderLateralNavigationControls()}
      </View>);
    }
}
const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
    },
    headerButton: {
        paddingVertical: 0,
        paddingHorizontal: 0,
        minWidth: 24,
        minHeight: 24,
    },
    headerButtonText: {
        marginHorizontal: 0,
    },
    lateralIcon: {
        marginHorizontal: 0,
    },
    subContainer: {
        flexDirection: 'row',
        alignItems: 'center',
    },
});
//# sourceMappingURL=calendarHeader.component.js.map