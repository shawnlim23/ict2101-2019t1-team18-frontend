/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, TouchableOpacity, View, } from 'react-native';
import { Interaction, styled, } from '../../theme';
import { Text, } from '../text/text.component';
import { isValidString } from '../support/services';
/**
 * `ListItem` is a support component for `List`.
 * The key feature of wrapping custom list items into `ListItem` component is that it automatically
 * picks background color fitting to current theme and responds to touches with feedback.
 *
 * @extends React.Component
 *
 * @property {string} title - Determines the title of the ListItem.
 *
 * @property {string} description - Determines the description of the ListItem's title.
 *
 * @property {StyleProp<TextStyle>} titleStyle - Customizes title style.
 *
 * @property {StyleProp<TextStyle>} descriptionStyle - Customizes description style.
 *
 * @property {React.ReactNode} children - Determines React Children of the component.
 *
 * @property {(style: StyleType, index: number) => React.ReactElement<any>} accessory - Determines the accessory of the
 * component.
 *
 * @property {(style: StyleType, index: number) => React.ReactElement<ImageProps>} icon - Determines the icon of the
 * component.
 *
 * @property {(index: number, event: GestureResponderEvent) => React.ReactElement<ImageProps>} onPress - Emits when
 * component is pressed.
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react'
 * import { ListItem } from '../..';
 *
 * export const ListItemShowcase = (props) => (
 *   <ListItem title='Title' description='Description' />
 * );
 * ```
 *
 * @overview-example With Icon
 *
 * ```
 * // IMPORTANT: To use Icon component make sure to follow this guide:
 * // https://akveo.github.io/react-native-ui-kitten/docs/guides/eva-icons
 *
 * import React from 'react'
 * import { ListItem, Icon } from '../..';
 *
 * const StarIcon = (style) => (
 *   <Icon {...style} name='star' />
 * );
 *
 * export const ListItemShowcase = (props) => (
 *   <ListItem title='Title' description='Description' icon={StarIcon} />
 * );
 * ```
 *
 * @example With Accessory
 *
 * ```
 * import React from 'react'
 * import { ListItem, Button } from '../..';
 *
 * export const ListItemShowcase = (props) => {
 *
 *   const Accessory = (style) => (
 *     <Button style={style}>BUTTON</Button>
 *   );
 *
 *   return (
 *     <ListItem title='Title' description='Description' accessory={Accessory} />
 *   );
 * };
 * ```
 *
 * @example Using Asset Icons
 *
 * ```
 * import React from 'react';
 * import { Image } from 'react-native';
 * import { ListItem } from '../..';
 *
 * const StarIcon = (style) => (
 *   <Image style={style} source={require('path-to-assets/local-image.png')} />
 * );
 *
 * export const ListItemShowcase = (props) => (
 *   <ListItem title='Title' description='Description' icon={StarIcon} />
 * );
 * ```
 *
 * @example Inline Styling
 *
 * ```
 * import React from 'react'
 * import { StyleSheet } from '../..';
 * import { ListItem } from '../..';
 *
 * export const ListItemShowcase = (props) => (
 *   <ListItem
 *     style={styles.listItem}
 *     titleStyle={styles.listItemTitle}
 *     descriptionStyle={styles.listItemDescription}
 *     title='Title'
 *     description='Description'
 *   />
 * );
 *
 * const styles = StyleSheet.create({
 *   listItem: { borderRadius: 8 },
 *   listItemTitle: { color: 'black' },
 *   listItemDescription: { color: 'gray' },
 * });
 * ```
 */
export class ListItemComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.onPress = (event) => {
            if (this.props.onPress) {
                this.props.onPress(this.props.index, event);
            }
        };
        this.onPressIn = (event) => {
            this.props.dispatch([Interaction.ACTIVE]);
            if (this.props.onPressIn) {
                this.props.onPressIn(this.props.index, event);
            }
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
            if (this.props.onPressOut) {
                this.props.onPressOut(this.props.index, event);
            }
        };
        this.onLongPress = (event) => {
            if (this.props.onLongPress) {
                this.props.onLongPress(this.props.index, event);
            }
        };
        this.getComponentStyle = (source) => {
            const { iconWidth, iconHeight, iconMarginHorizontal, iconTintColor, titleMarginHorizontal, titleFontFamily, titleFontSize, titleLineHeight, titleFontWeight, titleColor, descriptionFontFamily, descriptionFontSize, descriptionFontWeight, descriptionLineHeight, descriptionColor, descriptionMarginHorizontal, accessoryMarginHorizontal } = source, containerParameters = __rest(source, ["iconWidth", "iconHeight", "iconMarginHorizontal", "iconTintColor", "titleMarginHorizontal", "titleFontFamily", "titleFontSize", "titleLineHeight", "titleFontWeight", "titleColor", "descriptionFontFamily", "descriptionFontSize", "descriptionFontWeight", "descriptionLineHeight", "descriptionColor", "descriptionMarginHorizontal", "accessoryMarginHorizontal"]);
            return {
                container: containerParameters,
                contentContainer: {},
                icon: {
                    width: iconWidth,
                    height: iconHeight,
                    marginHorizontal: iconMarginHorizontal,
                    tintColor: iconTintColor,
                },
                title: {
                    marginHorizontal: titleMarginHorizontal,
                    fontFamily: titleFontFamily,
                    fontSize: titleFontSize,
                    lineHeight: titleLineHeight,
                    fontWeight: titleFontWeight,
                    color: titleColor,
                },
                description: {
                    color: descriptionColor,
                    fontFamily: descriptionFontFamily,
                    fontSize: descriptionFontSize,
                    fontWeight: descriptionFontWeight,
                    lineHeight: descriptionLineHeight,
                    marginHorizontal: descriptionMarginHorizontal,
                },
                accessory: {
                    marginHorizontal: accessoryMarginHorizontal,
                },
            };
        };
        this.renderIconElement = (style) => {
            // @ts-ignore: will be not executed if `icon` prop is provided
            const { index, icon } = this.props;
            const iconElement = icon(style, index);
            return React.cloneElement(iconElement, {
                key: 0,
                style: [style, styles.icon, iconElement.props.style],
            });
        };
        this.renderContentElement = (style) => {
            const { contentContainer } = style, contentStyles = __rest(style, ["contentContainer"]);
            const [titleElement, descriptionElement] = this.renderContentElementChildren(contentStyles);
            return (<View key={1} style={[contentContainer, styles.contentContainer]}>
        {titleElement}
        {descriptionElement}
      </View>);
        };
        this.renderTitleElement = (style) => {
            // @ts-ignore: will be not executed if `title` property is provided
            const { title, titleStyle } = this.props;
            return (<Text key={2} style={[style, styles.title, titleStyle]}>
        {title}
      </Text>);
        };
        this.renderDescriptionElement = (style) => {
            // @ts-ignore: will be not executed if `description` property is provided
            const { description, descriptionStyle } = this.props;
            return (<Text key={3} style={[style, styles.description, descriptionStyle]}>
        {description}
      </Text>);
        };
        this.renderAccessoryElement = (style) => {
            // @ts-ignore: will be not executed if `accessory` property is provided
            const { index, accessory } = this.props;
            const accessoryElement = accessory(style, index);
            return React.cloneElement(accessoryElement, {
                key: 4,
                style: [style, styles.accessory, accessoryElement.props.style],
            });
        };
        this.renderContentElementChildren = (style) => {
            // @ts-ignore: will be not executed if any of properties below is provided
            const { title, description } = this.props;
            return [
                isValidString(title) && this.renderTitleElement(style.title),
                isValidString(description) && this.renderDescriptionElement(style.description),
            ];
        };
        this.renderTemplateChildren = (style) => {
            // @ts-ignore: following props could not be provided
            const { icon, title, description, accessory } = this.props;
            return [
                icon && this.renderIconElement(style.icon),
                (title || description) && this.renderContentElement(style),
                accessory && this.renderAccessoryElement(style.accessory),
            ];
        };
        this.renderComponentChildren = (style) => {
            const { children } = this.props;
            return children ? children : this.renderTemplateChildren(style);
        };
    }
    render() {
        const _a = this.props, { themedStyle, style } = _a, derivedProps = __rest(_a, ["themedStyle", "style"]);
        const _b = this.getComponentStyle(themedStyle), { container } = _b, componentStyles = __rest(_b, ["container"]);
        const componentChildren = this.renderComponentChildren(componentStyles);
        return (<TouchableOpacity activeOpacity={1.0} {...derivedProps} style={[container, styles.container, style]} onPress={this.onPress} onPressIn={this.onPressIn} onPressOut={this.onPressOut} onLongPress={this.onLongPress}>
        {componentChildren}
      </TouchableOpacity>);
    }
}
ListItemComponent.styledComponentName = 'ListItem';
const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    contentContainer: {
        flex: 1,
    },
    icon: {},
    title: {
        textAlign: 'left',
    },
    description: {
        textAlign: 'left',
    },
    accessory: {},
});
export const ListItem = styled(ListItemComponent);
//# sourceMappingURL=listItem.component.js.map