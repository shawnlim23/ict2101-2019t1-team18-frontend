/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { FlatListProps, ListRenderItemInfo } from 'react-native';
import { StyledComponentProps, StyleType } from '../../theme';
declare type ItemType = any;
declare type ListItemElement = React.ReactElement<any>;
declare type RenderItemProp = (info: ListRenderItemInfo<ItemType>, style: StyleType) => ListItemElement;
interface ComponentProps {
    renderItem: RenderItemProp;
}
export declare type ListProps = StyledComponentProps & FlatListProps<ItemType> & ComponentProps;
export declare type ListElement = React.ReactElement<ListProps>;
export interface BaseScrollParams {
    animated?: boolean;
}
export interface ViewScrollParams {
    viewOffset?: number;
    viewPosition?: number;
}
export interface ScrollToIndexParams extends BaseScrollParams, ViewScrollParams {
    index: number;
}
export interface ScrollToOffsetParams extends BaseScrollParams {
    offset: number;
}
/**
 * `List` component is a performant interface for rendering simple, flat lists. Extends `FlatList`. Renders list of
 * `ListItem` components or custom content.
 *
 * @extends React.Component
 *
 * @property {(info: ListRenderItemInfo<ItemT>, style: StyleType) => React.ReactElement<any>} renderItem - Takes an
 * item from data and renders it into the list.
 *
 * @property FlatListProps<ItemType>
 *
 * @property StyledComponentProps
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react';
 * import { List, ListItem } from '../..';
 *
 * export const ListShowcase = (props) => {
 *
 *   const data = ['Item 1', 'Item 2', 'Item 3'];
 *
 *   const onItemPress = (index) => {
 *     // Handle item press
 *   };
 *
 *   const renderItem = ({ item, index }) => (
 *     <ListItem
 *       title={item}
 *       description='Description'
 *       onPress={onItemPress}
 *     />
 *   );
 *
 *   return (
 *     <List
 *       data={data}
 *       renderItem={renderItem}
 *     />
 *   );
 * };
 * ```
 *
 * @overview-example Custom List Item
 *
 * ```
 * import React from 'react';
 * import { List, ListItem, Text } from '../..';
 *
 * export const ListShowcase = (props) => {
 *
 *   const data = ['Item 1', 'Item 2', 'Item 3'];
 *
 *   const renderItem = ({ item, index }) => (
 *     <ListItem>
 *       <Text>{item}</Text>
 *     </ListItem>
 *   );
 *
 *   return (
 *     <List
 *       data={data}
 *       renderItem={renderItem}
 *     />
 *   );
 * };
 * ```
 *
 * @example Inline Styling
 *
 * ```
 * import React from 'react';
 * import { StyleSheet } from '../..';
 * import { List, ListItem } from '../..';
 *
 * export const ListShowcase = (props) => {
 *
 *   const data = ['Item 1', 'Item 2', 'Item 3'];
 *
 *   const onItemPress = (index) => {
 *     // Handle item press
 *   };
 *
 *   const renderItem = ({ item, index }) => (
 *     <ListItem
 *       title={item}
 *       description='Description'
 *       onPress={onItemPress}
 *     />
 *   );
 *
 *   return (
 *     <List
 *       contentContainerStyle={styles.contentContainer}
 *       data={data}
 *       renderItem={renderItem}
 *     />
 *   );
 * };
 *
 * const styles = StyleSheet.create({
 *   contentContainer: { paddingHorizontal: 8 },
 * });
 * ```
 */
export declare class ListComponent extends React.Component<ListProps> {
    static styledComponentName: string;
    private listRef;
    scrollToEnd: (params?: BaseScrollParams) => void;
    scrollToIndex: (params: ScrollToIndexParams) => void;
    scrollToOffset(params: ScrollToOffsetParams): void;
    private getComponentStyle;
    private getItemStyle;
    private keyExtractor;
    private renderItem;
    render(): React.ReactElement<FlatListProps<ItemType>>;
}
export declare const List: React.ComponentClass<ListProps, any>;
export {};
