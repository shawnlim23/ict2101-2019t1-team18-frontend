/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { View, StyleSheet, Dimensions, } from 'react-native';
import { ModalService, } from '../../theme';
import { MeasureNode, } from '../popover/measure.component';
const { width: screenWidth, height: screenHeight } = Dimensions.get('screen');
const TAG_CHILD = 'Modal';
const initialContentSize = { width: 0, height: 0 };
export const baseModalTestId = '@modal/base';
/**
 * `Modal` component is a wrapper than presents content above an enclosing view.
 *
 * @extends React.Component
 *
 * @property {boolean} visible - Determines whether component is visible. By default is false.
 *
 * @property {React.ReactElement<any> | React.ReactElement<any>[]} children -
 * Determines component's children.
 *
 * @property {boolean} allowBackdrop - Determines whether user can tap on back-drop.
 * Default is `false`.
 *
 * @property {BackdropStyle} backdropStyle - Determines the style of backdrop.
 *
 * @property {() => void} onBackdropPress - Determines component's behavior when the user is
 * tapping on back-drop.
 *
 * @property ViewProps
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react';
 * import { StyleSheet } from 'react-native';
 * import { Button, Modal, Text, Layout } from '../..';
 *
 * export class ModalShowcase extends React.Component {
 *
 *   state = {
 *     modalVisible: false,
 *   };
 *
 *   setModalVisible = () => {
 *     const modalVisible = !this.state.modalVisible;
 *     this.setState({ modalVisible });
 *   };
 *
 *   renderModalElement = () => {
 *     return (
 *       <Layout
 *         level='3'
 *         style={styles.modalContainer}>
 *         <Text>This is modal</Text>
 *         <Button onPress={this.setModalVisible}>Hide Modal</Button>
 *       </Layout>
 *     );
 *   };
 *
 *   render() {
 *     return (
 *       <Layout style={styles.container}>
 *         <Button onPress={this.setModalVisible}>Show Modal</Button>
 *         <Modal visible={this.state.modalVisible}>
 *           {this.renderModalElement()}
 *         </Modal>
 *       </Layout>
 *     );
 *   }
 * }
 *
 * const styles = StyleSheet.create({
 *   container: {
 *     flex: 1,
 *     padding: 16,
 *   },
 *   modalContainer: {
 *     width: 200,
 *     height: 200,
 *     justifyContent: 'center',
 *     alignItems: 'center',
 *   },
 * });
 * ```
 *
 * @overview-example With Backdrop
 *
 * ```
 * import React from 'react';
 * import { StyleSheet } from 'react-native';
 * import { Button, Modal, Text, Layout } from '../..';
 *
 * export class ModalShowcase extends React.Component {
 *
 *   state = {
 *     modalVisible: false,
 *   };
 *
 *   setModalVisible = () => {
 *     const modalVisible: boolean = !this.state.modalVisible;
 *     this.setState({ modalVisible });
 *   };
 *
 *   renderModalElement = () => {
 *     return (
 *       <Layout
 *         level='3'
 *         style={styles.modalContainer}>
 *         <Text>This is modal</Text>
 *         <Button onPress={this.setModalVisible}>Hide Modal</Button>
 *       </Layout>
 *     );
 *   };
 *
 *   render() {
 *     return (
 *       <Layout style={styles.container}>
 *         <Button onPress={this.setModalVisible}>Show Modal</Button>
 *         <Modal
 *           allowBackdrop={true}
 *           backdropStyle={{ backgroundColor: 'black', opacity: 0.5 }}
 *           onBackdropPress={this.setModalVisible}
 *           visible={this.state.modalVisible}>
 *           {this.renderModalElement()}
 *         </Modal>
 *       </View>
 *     );
 *   }
 * }
 *
 * const styles = StyleSheet.create({
 *   container: {
 *     flex: 1,
 *     padding: 16,
 *   },
 *   modalContainer: {
 *     width: 200,
 *     height: 200,
 *     justifyContent: 'center',
 *     alignItems: 'center',
 *   },
 * });
 * ```
 */
export class Modal extends React.Component {
    constructor() {
        super(...arguments);
        this.contentSize = initialContentSize;
        this.id = '';
        this.handleVisibility = (props) => {
            const { allowBackdrop, onBackdropPress } = this.props;
            if (props.visible) {
                const element = this.renderModal();
                this.id = ModalService.show(element, { allowBackdrop, onBackdropPress });
            }
            else {
                ModalService.hide(this.id);
                this.id = '';
            }
        };
        this.getAbsoluteRelatedStyle = () => {
            const { width, height } = this.contentSize;
            return {
                top: (screenHeight - height) / 2,
                left: (screenWidth - width) / 2,
            };
        };
        this.onMeasure = (result) => {
            this.contentSize = result[TAG_CHILD].size;
        };
        this.renderBaseModal = () => {
            const _a = this.props, { style, children } = _a, restProps = __rest(_a, ["style", "children"]);
            const absoluteRelatedStyle = this.getAbsoluteRelatedStyle();
            const measuringProps = { tag: TAG_CHILD };
            return (<View {...restProps} {...measuringProps} testID={baseModalTestId} key={TAG_CHILD} style={[styles.container, absoluteRelatedStyle, style]}>
        {children}
      </View>);
        };
        this.renderModal = () => {
            const { backdropStyle } = this.props;
            const modal = this.renderBaseModal();
            return backdropStyle ? (<React.Fragment>
        <View pointerEvents='box-none' style={[styles.backdrop, backdropStyle]}/>
        {modal}
      </React.Fragment>) : modal;
        };
        this.renderMeasureNode = () => {
            const modal = this.renderBaseModal();
            const measureStyledModal = React.cloneElement(modal, {
                style: [modal.props.style, styles.hiddenModal],
                key: TAG_CHILD,
                pointerEvents: 'none',
            });
            return (<MeasureNode onResult={this.onMeasure}>
        {[measureStyledModal]}
      </MeasureNode>);
        };
    }
    componentDidUpdate(prevProps) {
        if (prevProps.visible !== this.props.visible) {
            this.handleVisibility(this.props);
        }
        else if (prevProps.visible && this.props.visible) {
            const element = this.renderModal();
            ModalService.update(this.id, element.props.children);
        }
    }
    render() {
        return this.renderMeasureNode();
    }
}
Modal.defaultProps = {
    allowBackdrop: false,
    onBackdropPress: () => null,
};
const styles = StyleSheet.create({
    container: {
        position: 'absolute',
    },
    backdrop: {
        position: 'absolute',
        width: screenWidth,
        height: screenHeight,
    },
    hiddenModal: {
        opacity: 0,
    },
});
//# sourceMappingURL=modal.component.js.map