/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { StyleProp, ViewProps, ViewStyle } from 'react-native';
import { TabElement } from './tab.component';
declare type ChildrenProp = TabElement | TabElement[];
interface ComponentProps {
    children: ChildrenProp;
    selectedIndex?: number;
    tabBarStyle?: StyleProp<ViewStyle>;
    indicatorStyle?: StyleProp<ViewStyle>;
    shouldLoadComponent?: (index: number) => boolean;
    onOffsetChange?: (offset: number) => void;
    onSelect?: (index: number) => void;
}
export declare type TabViewProps = ViewProps & ComponentProps;
export declare type TabViewElement = React.ReactElement<TabViewProps>;
/**
 * `TabView` is a dynamic tabset component. Allows flipping through the tab "pages".
 *
 * @extends React.Component
 **
 * @property {number} selectedIndex - Determines current tab index.
 *
 * @property {StyleProp<ViewStyle>} tabBarStyle - Determines style TabBar component.
 *
 * @property {StyleProp<ViewStyle>} indicatorStyle - Determines style of selected tab indicator.
 *
 * @property {(index: number) => void} onSelect - Fires on "page" select with corresponding index.
 *
 * @property {TabElement | TabElement[]} children - Determines children of the component.
 *
 * @property {(index: number) => boolean} shouldLoadComponent - Determines loading behavior particular page and can be
 * used for lazy loading.
 *
 * @property {(offset: number) => void} onOffsetChange - Fires on scroll event with current scroll offset.
 *
 * @property ViewProps
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react';
 * import { TabView, Tab, Text } from '../..';
 *
 * export class TabViewShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: 0,
 *   };
 *
 *   onSelect = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   render() {
 *     return (
 *       <TabView
 *         selectedIndex={this.state.selectedIndex}
 *         onSelect={this.onSelect}>
 *         <Tab title='DASHBOARD'>
 *           <Text>DASHBOARD</Text>
 *         </Tab>
 *         <Tab title='SETTINGS'>
 *           <Text>SETTINGS</Text>
 *         </Tab>
 *       </TabView>
 *     );
 *   }
 * }
 * ```
 *
 * @overview-example Lazy Loading
 *
 * ```
 * import React from 'react';
 * import { TabView, Tab, Text } from '../..';
 *
 * export class TabViewShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: 0,
 *   };
 *
 *   onSelect = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   shouldLoadTabContent = (index) => {
 *     return index === this.state.selectedIndex;
 *   };
 *
 *   render() {
 *     return (
 *       <TabView
 *         selectedIndex={this.state.selectedIndex}
 *         shouldLoadComponent={this.shouldLoadTabContent}
 *         onSelect={this.onSelect}>
 *         <Tab title='DASHBOARD'>
 *           <Text>DASHBOARD</Text>
 *         </Tab>
 *         <Tab title='SETTINGS'>
 *           <Text>SETTINGS</Text>
 *         </Tab>
 *       </TabView>
 *     );
 *   }
 * }
 * ```
 *
 * @example Inline Styling
 *
 * ```
 * import React from 'react';
 * import { StyleSheet } from 'react-native';
 * import { TabView, Tab, Text } from '../..';
 *
 * export const TabViewShowcase = (props) => (
 *   <TabView
 *     style={styles.tabView}
 *     tabBarStyle={styles.tabBar}
 *     indicatorStyle={styles.tabViewIndicator}>
 *     <Tab title='DASHBOARD'>
 *       <Text>DASHBOARD</Text>
 *     </Tab>
 *     <Tab title='SETTINGS'>
 *       <Text>SETTINGS</Text>
 *     </Tab>
 *   </TabView>
 * );
 *
 * const styles = StyleSheet.create({
 *   tabView: { backgroundColor: 'white' },
 *   tabBar: { backgroundColor: 'gray' },
 *   tabViewIndicator: { backgroundColor: 'blue' },
 * });
 * ```
 */
export declare class TabView extends React.Component<TabViewProps> {
    static defaultProps: Partial<TabViewProps>;
    private viewPagerRef;
    private tabBarRef;
    private onBarSelect;
    private onPagerOffsetChange;
    private onPagerSelect;
    private renderComponentChild;
    private renderComponentChildren;
    render(): React.ReactElement<ViewProps>;
}
export {};
