/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, } from 'react-native';
import { List, } from '../list/list.component';
import { SelectOption, } from './selectOption.component';
import { SelectGroupOption, } from './selectGroupOption.component';
export class SelectOptionsList extends React.Component {
    constructor() {
        super(...arguments);
        this.areThereSubItems = (dropdownItem) => {
            const { items } = dropdownItem;
            return items && items.length !== 0;
        };
        this.onSelect = (option, event) => {
            this.props.onSelect(option, event);
        };
        this.renderDefaultItem = (info) => {
            const { renderItem, multiSelect, strategy } = this.props;
            const selected = strategy.isSelected(info.item);
            return this.areThereSubItems(info.item) ? (<SelectGroupOption {...info} strategy={strategy} multiSelect={multiSelect} renderItem={renderItem} onPress={this.onSelect}/>) : (<SelectOption {...info} disabled={info.item.disabled} selected={selected} multiSelect={multiSelect} onPress={this.onSelect}/>);
        };
        this.renderItem = (info) => {
            const { renderItem } = this.props;
            return renderItem ? renderItem(info) : this.renderDefaultItem(info);
        };
    }
    render() {
        const _a = this.props, { style } = _a, restProps = __rest(_a, ["style"]);
        return (<List {...restProps} style={[styles.container, style]} renderItem={this.renderItem}/>);
    }
}
const styles = StyleSheet.create({
    container: {},
});
//# sourceMappingURL=selectOptionsList.component.js.map