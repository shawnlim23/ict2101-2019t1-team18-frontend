/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, View, } from 'react-native';
import { styled, } from '../../theme';
/**
 * Renders a group of `Radio` buttons.
 *
 * @extends React.Component
 *
 * @property {React.ReactElement<RadioProps> | React.ReactElement<RadioProps>[]} children -
 * Determines radio buttons in group.
 *
 * @property {number} selectedIndex - Determines the index of selected button
 *
 * @property {(index: number) => void} onChange - Fires when selected radio is changed.
 *
 * @property ViewProps
 *
 * @property StyledComponentProps
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react';
 * import { Radio, RadioGroup } from '../..';
 *
 * export class RadioGroupShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: 0,
 *   };
 *
 *   onGroupSelectionChange = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   render() {
 *     return (
 *       <RadioGroup
 *         selectedIndex={this.state.selectedIndex}
 *         onChange={this.onGroupSelectionChange}>
 *         <Radio text='Option 1' />
 *         <Radio text='Option 2' />
 *         <Radio text='Option 3' />
 *       </RadioGroup>
 *     );
 *   }
 * }
 * ```
 *
 * @overview-example Eva Styling
 *
 * ```
 * import React from 'react';
 * import { Radio, RadioGroup } from '../..';
 *
 * export class RadioGroupShowcase extends React.Component {
 *
 *   state = {
 *     selectedIndex: 0,
 *   };
 *
 *   onGroupSelectionChange = (selectedIndex) => {
 *     this.setState({ selectedIndex });
 *   };
 *
 *   render() {
 *     return (
 *       <RadioGroup
 *         status='danger'
 *         selectedIndex={this.state.selectedIndex}
 *         onChange={this.onGroupSelectionChange}>
 *         <Radio text='Option 1' />
 *         <Radio text='Option 2' />
 *         <Radio text='Option 3' />
 *       </RadioGroup>
 *     );
 *   }
 * }
 * ```
 */
class RadioGroupComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.onRadioChange = (index) => {
            if (this.props.onChange) {
                this.props.onChange(index);
            }
        };
        this.getComponentStyle = (source) => {
            return {
                container: source,
            };
        };
        this.renderRadioElement = (element, index) => {
            return React.cloneElement(element, {
                key: index,
                checked: this.props.selectedIndex === index,
                onChange: () => this.onRadioChange(index),
            });
        };
        this.renderRadioElements = (source) => {
            return React.Children.map(source, this.renderRadioElement);
        };
    }
    render() {
        const _a = this.props, { themedStyle, style, children } = _a, derivedProps = __rest(_a, ["themedStyle", "style", "children"]);
        const componentStyle = this.getComponentStyle(themedStyle);
        const radioElements = this.renderRadioElements(children);
        return (<View {...derivedProps} style={[componentStyle.container, styles.container, style]}>
        {radioElements}
      </View>);
    }
}
RadioGroupComponent.styledComponentName = 'RadioGroup';
RadioGroupComponent.defaultProps = {
    selectedIndex: -1,
};
const styles = StyleSheet.create({
    container: {},
});
export const RadioGroup = styled(RadioGroupComponent);
//# sourceMappingURL=radioGroup.component.js.map