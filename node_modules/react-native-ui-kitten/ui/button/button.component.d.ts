/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { ImageProps, ImageStyle, StyleProp, TextStyle, TouchableOpacityProps } from 'react-native';
import { StyledComponentProps } from '../../theme';
declare type IconElement = React.ReactElement<ImageProps>;
declare type IconProp = (style: ImageStyle) => IconElement;
interface ComponentProps {
    textStyle?: StyleProp<TextStyle>;
    icon?: IconProp;
    status?: string;
    size?: string;
    children?: string;
}
export declare type ButtonProps = StyledComponentProps & TouchableOpacityProps & ComponentProps;
export declare type ButtonElement = React.ReactElement<ButtonProps>;
/**
 * Styled `Button` component.
 *
 * @extends React.Component
 *
 * @property {boolean} disabled - Determines whether component is disabled.
 * Default is `false`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `primary`.
 *
 * @property {string} size - Determines the size of the component.
 * Can be `giant`, `large`, `medium`, `small`, or `tiny`.
 * Default is `medium`.
 *
 * @property {string} children - Determines text of the component.
 *
 * @property {StyleProp<TextStyle>} textStyle - Customizes text style.
 *
 * @property {(style: StyleType) => React.ReactElement<ImageProps>} icon - Determines icon of the component.
 *
 * @property {string} appearance - Determines the appearance of the component.
 * Can be `filled` | `outline` | `ghost`.
 * Default is `filled`.
 *
 * @property TouchableOpacityProps
 *
 * @property StyledComponentProps
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react';
 * import { Button } from '../..';
 *
 * export const ButtonShowcase = (props) => {
 *
 *   const onPress = () => {
 *     // Handle Button press
 *   };
 *
 *   return (
 *     <Button onPress={onPress}>BUTTON</Button>
 *   );
 * };
 * ```
 *
 * @overview-example With Icon
 *
 * ```
 * // IMPORTANT: To use Icon component make sure to follow this guide:
 * // https://akveo.github.io/react-native-ui-kitten/docs/guides/eva-icons
 *
 * import React from 'react';
 * import { Button, Icon } from '../..';
 *
 * const FacebookIcon = (style) => (
 *   <Icon {...style} name='facebook' />
 * );
 *
 * export const LoginButton = (props) => (
 *   <Button icon={FacebookIcon}>Login with Facebook</Button>
 * );
 * ```
 *
 * @overview-example Eva Styling
 *
 * ```
 * import React from 'react';
 * import { Button } from '../..';
 *
 * export const ButtonShowcase = (props) => (
 *   <Button
 *     appearance='outline'
 *     status='danger'
 *     size='large'>
 *     BUTTON
 *   </Button>
 * );
 * ```
 *
 * @example Using Asset Icons
 *
 * ```
 * import React from 'react';
 * import { Image } from 'react-native';
 * import { Button } from '../..';
 *
 * const StarIcon = (style) => (
 *   <Image style={style} source={require('path-to-assets/local-image.png')} />
 * );
 *
 * export const StarButton = (props) => (
 *   <Button icon={StarIcon}>BUTTON</Button>
 * );
 * ```
 *
 * @example Inline Styling
 *
 * ```
 * import React from 'react';
 * import { StyleSheet } from 'react-native';
 * import { Button } from '../..';
 *
 * export const ButtonShowcase = (props) => (
 *   <Button
 *     style={styles.button}
 *     textStyle={styles.buttonText}>
 *     BUTTON
 *   </Button>
 * );
 *
 * const styles = StyleSheet.create({
 *   button: { borderRadius: 8 },
 *   buttonText: { color: 'white' },
 * });
 * ```
 */
export declare class ButtonComponent extends React.Component<ButtonProps> {
    static styledComponentName: string;
    private onPress;
    private onPressIn;
    private onPressOut;
    private getComponentStyle;
    private renderTextElement;
    private renderIconElement;
    private renderComponentChildren;
    render(): React.ReactElement<TouchableOpacityProps>;
}
export declare const Button: React.ComponentClass<ButtonProps, any>;
export {};
