/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { GestureResponderEvent, PanResponderCallbacks, PanResponderGestureState, StyleProp, TextStyle, ViewProps } from 'react-native';
import { StyledComponentProps } from '../../theme';
interface ComponentProps {
    checked?: boolean;
    disabled?: boolean;
    status?: string;
    size?: string;
    text?: string;
    textStyle?: StyleProp<TextStyle>;
    onChange?: (checked: boolean) => void;
}
export declare type ToggleProps = StyledComponentProps & ViewProps & ComponentProps;
export declare type ToggleElement = React.ReactElement<ToggleProps>;
/**
 * Styled `Toggle` component.
 *
 * @extends React.Component
 *
 * @property {boolean} checked - Determines whether component is checked.
 * Default is `false`.
 *
 * @property {boolean} disabled - Determines whether component is disabled.
 * Default is `false`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `primary`, `success`, `info`, `warning`, `danger`, `basic` or `control`.
 * Default is `basic`.
 *
 * @property {string} size - Determines the size of the component.
 * Can be `giant`, `large`, `medium`, `small`, or `tiny`.
 * Default is `medium`.
 *
 * @property {string} text - Determines text of the component.
 *
 * @property {StyleProp<TextStyle>} textStyle - Customizes text style.
 *
 * @property {(checked: boolean) => void} onChange - Fires when selection state is changed.
 *
 * @property TouchableOpacityProps
 *
 * @property StyledComponentProps
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react';
 * import { Toggle } from '../..';
 *
 * export class ToggleShowcase extends React.Component {
 *
 *   state = {
 *     checked: false,
 *   };
 *
 *   onChange = (checked) => {
 *     this.setState({ checked });
 *   };
 *
 *   render() {
 *     return (
 *       <Toggle
 *         checked={this.state.checked}
 *         onChange={this.onChange}
 *       />
 *     );
 *   }
 * }
 * ```
 *
 * @overview-example With Text
 *
 * ```
 * import React from 'react';
 * import { Toggle } from '../..';
 *
 * export class ToggleShowcase extends React.Component {
 *
 *   state = {
 *     checked: false,
 *   };
 *
 *   onChange = (checked) => {
 *     this.setState({ checked });
 *   };
 *
 *   render() {
 *     return (
 *       <Toggle
 *         text='Place your text'
 *         checked={this.state.checked}
 *         onChange={this.onChange}
 *       />
 *     )
 *   }
 * }
 * ```
 *
 * @overview-example Eva Styling
 *
 * ```
 * import React from 'react';
 * import { Toggle } from '../..';
 *
 * export class ToggleShowcase extends React.Component {
 *
 *   state = {
 *     checked: false,
 *   };
 *
 *   onChange = (checked) => {
 *     this.setState({ checked });
 *   };
 *
 *   render() {
 *     return (
 *       <Toggle
 *         size='small'
 *         status='info'
 *         checked={this.state.checked}
 *         onChange={this.onChange}
 *       />
 *     );
 *   }
 * }
 * ```
 *
 * @example Inline Styling
 *
 * ```
 * import React from 'react';
 * import { StyleSheet } from 'react-native';
 * import { Toggle } from '../..';
 *
 * export class ToggleShowcase extends React.Component {
 *
 *   state = {
 *     checked: false,
 *   };
 *
 *   onChange = (checked) => {
 *     this.setState({ checked });
 *   };
 *
 *   render() {
 *     return (
 *       <Toggle
 *         textStyle={styles.toggleText}
 *         text='Place your Text'
 *         checked={this.state.checked}
 *         onChange={this.onChange}
 *       />
 *     );
 *   }
 * }
 *
 * const styles = StyleSheet.create({
 *   toggleText: { color: 'black' },
 * });
 * ```
 */
export declare class ToggleComponent extends React.Component<ToggleProps> implements PanResponderCallbacks {
    static styledComponentName: string;
    private panResponder;
    private thumbWidthAnimation;
    private thumbTranslateAnimation;
    private ellipseScaleAnimation;
    private thumbTranslateAnimationActive;
    constructor(props: ToggleProps);
    onStartShouldSetPanResponder: () => boolean;
    onStartShouldSetPanResponderCapture: () => boolean;
    onMoveShouldSetPanResponder: () => boolean;
    onMoveShouldSetPanResponderCapture: () => boolean;
    onPanResponderTerminationRequest: () => boolean;
    onPanResponderGrant: () => void;
    onPanResponderMove: () => boolean;
    onPanResponderRelease: (e: GestureResponderEvent, gestureState: PanResponderGestureState) => void;
    private onPressIn;
    private onPressOut;
    private onPress;
    private getComponentStyle;
    private animateThumbTranslate;
    private animateThumbWidth;
    private animateEllipseScale;
    private animateThumbScale;
    private stopAnimations;
    private toggle;
    private getInterpolatedColor;
    private renderTextElement;
    private renderComponentChildren;
    render(): React.ReactElement<ViewProps>;
}
export declare const Toggle: React.ComponentClass<ToggleProps, any>;
export {};
