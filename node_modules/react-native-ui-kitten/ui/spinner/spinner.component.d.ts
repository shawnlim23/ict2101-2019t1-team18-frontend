import React from 'react';
import { ViewProps } from 'react-native';
import { StyledComponentProps } from '../../theme';
interface ComponentProps extends ViewProps {
    animating?: boolean;
    size?: string;
    status?: string;
}
export declare type SpinnerProps = StyledComponentProps & ComponentProps;
export declare type SpinnerElement = React.ReactElement<SpinnerProps>;
/**
 * Styled `Spinner` component. Designed to be used as `ActivityIndicator` component
 *
 * @extends React.Component
 *
 * @property {boolean} animating - Determines whether component is animating. Default is `true`.
 *
 * @property {string} size - Determines the the component.
 * Can be `giant`, `large`, `medium`, `small` or `tiny`.
 * Default is `medium`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `primary`, `success`, `info`, `warning`, `danger` or `alternative`.
 * Default is `primary`.
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react';
 * import { Spinner } from '../..';
 *
 * export const SpinnerShowcase = () => (
 *   <Spinner />
 * );
 * ```
 *
 * @overview-example Loading Data
 *
 * ```
 * import React from 'react';
 * import { View, StyleSheet } from 'react-native';
 * import { Spinner, List, ListItem } from '../..';
 *
 * export class SpinnerDataLoading extends React.Component {
 *
 *  state = {
 *    data: [],
 *  };
 *
 *  componentDidMount() {
 *    setTimeout(this.loadData, 3000);
 *  }
 *
 *  loadData = () => {
 *    const data = [
 *      {
 *        title: 'Item 1',
 *      },
 *      {
 *        title: 'Item 2',
 *      },
 *      {
 *        title: 'Item 3',
 *      },
 *    ];
 *    this.setState({ data });
 *  };
 *
 *  private renderLoading = () => (
 *    <View style={styles.loading}>
 *      <Spinner/>
 *    </View>
 *  );
 *
 *  renderDataItem = ({ item }) => (
 *    <ListItem title={item.title}/>
 *  );
 *
 *  renderData = () => (
 *    <List data={this.state.data} renderItem={this.renderDataItem}/>
 *  );
 *
 *  render() {
 *    const isLoaded: boolean = this.state.data.length > 0;
 *    return isLoaded ? this.renderData() : this.renderLoading();
 *  }
 *}
 *
 * const styles = StyleSheet.create({
 *   loading: {
 *     flex: 1,
 *     justifyContent: 'center',
 *     alignItems: 'center',
 *   },
 *});
 *```
 *
 * @overview-example Eva Styling
 *
 * ```
 * import React from 'react';
 * import { Spinner } from '../..';
 *
 * export const SpinnerShowcase = (props) => (
 *   <Spinner size='giant' status='danger' />
 * );
 * ```
 */
export declare class SpinnerComponent extends React.PureComponent<SpinnerProps> {
    static styledComponentName: string;
    static defaultProps: Partial<SpinnerProps>;
    private animation;
    private readonly containerSize;
    componentDidMount(): void;
    componentDidUpdate(prevProps: SpinnerProps): void;
    componentWillUnmount(): void;
    private startAnimation;
    private stopAnimation;
    private getComponentStyle;
    private renderArcElement;
    render(): React.ReactElement<ViewProps>;
}
export declare const Spinner: React.ComponentClass<SpinnerProps, any>;
export {};
