import React from 'react';
import { Animated, StyleSheet, View, } from 'react-native';
import { styled, } from '../../theme';
import { SpinnerAnimation, } from './animation';
// TODO: Frame, Point, Size types should be refactored to common types
import { Size } from '../popover/type';
/**
 * Styled `Spinner` component. Designed to be used as `ActivityIndicator` component
 *
 * @extends React.Component
 *
 * @property {boolean} animating - Determines whether component is animating. Default is `true`.
 *
 * @property {string} size - Determines the the component.
 * Can be `giant`, `large`, `medium`, `small` or `tiny`.
 * Default is `medium`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `primary`, `success`, `info`, `warning`, `danger` or `alternative`.
 * Default is `primary`.
 *
 * @overview-example Simple Usage
 *
 * ```
 * import React from 'react';
 * import { Spinner } from '../..';
 *
 * export const SpinnerShowcase = () => (
 *   <Spinner />
 * );
 * ```
 *
 * @overview-example Loading Data
 *
 * ```
 * import React from 'react';
 * import { View, StyleSheet } from 'react-native';
 * import { Spinner, List, ListItem } from '../..';
 *
 * export class SpinnerDataLoading extends React.Component {
 *
 *  state = {
 *    data: [],
 *  };
 *
 *  componentDidMount() {
 *    setTimeout(this.loadData, 3000);
 *  }
 *
 *  loadData = () => {
 *    const data = [
 *      {
 *        title: 'Item 1',
 *      },
 *      {
 *        title: 'Item 2',
 *      },
 *      {
 *        title: 'Item 3',
 *      },
 *    ];
 *    this.setState({ data });
 *  };
 *
 *  private renderLoading = () => (
 *    <View style={styles.loading}>
 *      <Spinner/>
 *    </View>
 *  );
 *
 *  renderDataItem = ({ item }) => (
 *    <ListItem title={item.title}/>
 *  );
 *
 *  renderData = () => (
 *    <List data={this.state.data} renderItem={this.renderDataItem}/>
 *  );
 *
 *  render() {
 *    const isLoaded: boolean = this.state.data.length > 0;
 *    return isLoaded ? this.renderData() : this.renderLoading();
 *  }
 *}
 *
 * const styles = StyleSheet.create({
 *   loading: {
 *     flex: 1,
 *     justifyContent: 'center',
 *     alignItems: 'center',
 *   },
 *});
 *```
 *
 * @overview-example Eva Styling
 *
 * ```
 * import React from 'react';
 * import { Spinner } from '../..';
 *
 * export const SpinnerShowcase = (props) => (
 *   <Spinner size='giant' status='danger' />
 * );
 * ```
 */
export class SpinnerComponent extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.animation = new SpinnerAnimation(this.containerSize.height);
        this.startAnimation = () => {
            this.animation.start();
        };
        this.stopAnimation = () => {
            this.animation.stop();
        };
        this.getComponentStyle = (source) => {
            const start = {
                container: source.container,
                arc: source.start,
            };
            const end = {
                container: source.container,
                arc: source.end,
                overflow: { top: this.containerSize.height / 2 },
            };
            return { start, end };
        };
        this.renderArcElement = (style, size) => {
            const arcSize = new Size(size.width, size.height / 2);
            return (<Animated.View style={[style.container, styles.absolute, size]}>
        <View style={[styles.noOverflow, style.overflow, arcSize]}>
          <Animated.View style={[style.arc, size]}>
            <View style={[styles.noOverflow, arcSize]}>
              <View style={[this.props.themedStyle, this.props.style]}/>
            </View>
          </Animated.View>
        </View>
      </Animated.View>);
        };
    }
    get containerSize() {
        const { width, height } = StyleSheet.flatten([this.props.themedStyle, this.props.style]);
        // @ts-ignore: width and height are restricted to be a number
        return new Size(width, height);
    }
    componentDidMount() {
        if (this.props.animating) {
            this.startAnimation();
        }
    }
    componentDidUpdate(prevProps) {
        const animatingChanged = this.props.animating !== prevProps.animating;
        if (animatingChanged && this.props.animating) {
            this.startAnimation();
        }
        if (animatingChanged && !this.props.animating) {
            this.stopAnimation();
        }
    }
    componentWillUnmount() {
        this.animation.release();
    }
    render() {
        const containerSize = this.containerSize;
        const { start, end } = this.getComponentStyle(this.animation.toProps());
        return (<View style={containerSize}>
        {this.renderArcElement(start, containerSize)}
        {this.renderArcElement(end, containerSize)}
      </View>);
    }
}
SpinnerComponent.styledComponentName = 'Spinner';
SpinnerComponent.defaultProps = {
    animating: true,
};
const styles = StyleSheet.create({
    absolute: StyleSheet.absoluteFillObject,
    noOverflow: {
        overflow: 'hidden',
    },
});
export const Spinner = styled(SpinnerComponent);
//# sourceMappingURL=spinner.component.js.map